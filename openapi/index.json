{
  "openapi": "3.0.1",
  "info": {
    "version": "9.0.0",
    "title": "GitHub v3 REST API",
    "description": "Generated from octokit/routes",
    "license": {
      "name": "MIT"
    },
    "termsOfService": "https://help.github.com/articles/github-terms-of-service/",
    "contact": {
      "name": "Support",
      "email": "support@github.com"
    }
  },
  "servers": [{
    "url": "https://api.github.com"
  }],
  "externalDocs": {
    "description": "GitHub v3 REST API",
    "url": "https://developer.github.com/v3/"
  },
  "components": {
    "parameters": {
      "owner": {
        "name": "owner",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": ""
      },
      "repo": {
        "name": "repo",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": ""
      },
      "per_page": {
        "name": "per_page",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100,
          "default": 30
        },
        "description": "Results per page (max 100)"
      },
      "page": {
        "name": "page",
        "in": "query",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "default": 1
        },
        "description": "Page number of the results to fetch."
      }
    },
    "schemas": {
      "user": {
        "properties": {
          "login": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "node_id": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "gravatar_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "followers_url": {
            "type": "string"
          },
          "following_url": {
            "type": "string"
          },
          "gists_url": {
            "type": "string"
          },
          "starred_url": {
            "type": "string"
          },
          "subscriptions_url": {
            "type": "string"
          },
          "organizations_url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "received_events_url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "site_admin": {
            "type": "boolean"
          }
        }
      },
      "label-summary": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "milestone": {
        "properties": {
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "node_id": {
            "type": "string"
          },
          "number": {
            "type": "integer"
          },
          "state": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "creator": {
            "$ref": "#/components/schemas/user"
          },
          "open_issues": {
            "type": "integer"
          },
          "closed_issues": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "closed_at": {
            "type": "string"
          },
          "due_on": {
            "type": "string"
          }
        }
      },
      "pull-request-summary": {
        "properties": {
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "diff_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          }
        }
      },
      "issue": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "number": {
            "type": "integer"
          },
          "state": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/user"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/label-summary"
            }
          },
          "assignee": {
            "$ref": "#/components/schemas/user"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user"
            }
          },
          "milestone": {
            "$ref": "#/components/schemas/milestone"
          },
          "locked": {
            "type": "boolean"
          },
          "active_lock_reason": {
            "type": "string"
          },
          "comments": {
            "type": "integer"
          },
          "pull_request": {
            "$ref": "#/components/schemas/pull-request-summary"
          },
          "closed_at": {
            "type": "null"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      }
    }
  },
  "paths": {
    "/repos/{owner}/{repo}/issues": {
      "get": {
        "summary": "List issues for a repository",
        "description": "...",
        "operationId": "list-for-repo",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#list-issues-for-a-repository"
        },
        "parameters": [{
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "milestone",
            "in": "query",
            "schema": {
              "oneOf": [{
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                {
                  "type": "string",
                  "enum": ["*"]
                }
              ]
            },
            "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned."
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            },
            "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`."
          },
          {
            "name": "assignee",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user."
          },
          {
            "name": "creator",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "The user that created the issue."
          },
          {
            "name": "mentioned",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "A user that's mentioned in the issue."
          },
          {
            "name": "labels",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "A list of comma separated label names. Example: `bug,ui,@high`"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            },
            "description": "What to sort results by. Can be either `created`, `updated`, `comments`."
          },
          {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "The direction of the sort. Can be either `asc` or `desc`."
          },
          {
            "name": "since",
            "in": "query",
            "schema": {
              "type": "date-time"
            },
            "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of issues for a repository",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
