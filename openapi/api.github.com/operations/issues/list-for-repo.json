{
  "summary": "List issues for a repository",
  "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n\nBe aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.\n\n",
  "operationId": "issues.listForRepo",
  "tags": [
    "issues"
  ],
  "externalDocs": {
    "description": "API method documentation",
    "url": "https://developer.github.com/v3/issues/#list-issues-for-a-repository"
  },
  "parameters": [
    {
      "name": "accept",
      "description": "Setting to `application/vnd.github.v3+json` is recommended",
      "in": "header",
      "schema": {
        "type": "string",
        "default": "application/vnd.github.v3+json"
      }
    },
    {
      "name": "owner",
      "in": "path",
      "schema": {
        "type": "string"
      },
      "required": true,
      "description": "owner parameter"
    },
    {
      "name": "repo",
      "in": "path",
      "schema": {
        "type": "string"
      },
      "required": true,
      "description": "repo parameter"
    },
    {
      "name": "milestone",
      "in": "query",
      "schema": {
        "type": "string"
      },
      "required": false,
      "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned."
    },
    {
      "name": "state",
      "in": "query",
      "schema": {
        "type": "string",
        "enum": [
          "open",
          "closed",
          "all"
        ],
        "default": "open"
      },
      "required": false,
      "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`."
    },
    {
      "name": "assignee",
      "in": "query",
      "schema": {
        "type": "string"
      },
      "required": false,
      "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user."
    },
    {
      "name": "creator",
      "in": "query",
      "schema": {
        "type": "string"
      },
      "required": false,
      "description": "The user that created the issue."
    },
    {
      "name": "mentioned",
      "in": "query",
      "schema": {
        "type": "string"
      },
      "required": false,
      "description": "A user that's mentioned in the issue."
    },
    {
      "name": "labels",
      "in": "query",
      "schema": {
        "type": "string"
      },
      "required": false,
      "description": "A list of comma separated label names. Example: `bug,ui,@high`"
    },
    {
      "name": "sort",
      "in": "query",
      "schema": {
        "type": "string",
        "enum": [
          "created",
          "updated",
          "comments"
        ],
        "default": "created"
      },
      "required": false,
      "description": "What to sort results by. Can be either `created`, `updated`, `comments`."
    },
    {
      "name": "direction",
      "in": "query",
      "schema": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "default": "desc"
      },
      "required": false,
      "description": "The direction of the sort. Can be either `asc` or `desc`."
    },
    {
      "name": "since",
      "in": "query",
      "schema": {
        "type": "string"
      },
      "required": false,
      "description": "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
    },
    {
      "name": "per_page",
      "in": "query",
      "schema": {
        "type": "integer",
        "default": 30
      },
      "required": false,
      "description": "Results per page (max 100)"
    },
    {
      "name": "page",
      "in": "query",
      "schema": {
        "type": "integer",
        "default": 1
      },
      "required": false,
      "description": "Page number of the results to fetch."
    }
  ],
  "responses": {
    "200": {
      "description": "response",
      "content": {
        "application/json": {
          "schema": {}
        }
      }
    }
  },
  "x-code-samples": [
    {
      "lang": "Shell",
      "source": "curl \\\n  -H\"Accept: application/vnd.github.v3+json\" \\\n  https://developer.github.com/repos/octocat/:repo/issues"
    },
    {
      "lang": "JS",
      "source": "octokit.issues.listForRepo({\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
    }
  ],
  "x-github": {
    "legacy": false,
    "enabledForApps": true,
    "githubCloudOnly": false
  },
  "x-changes": []
}
