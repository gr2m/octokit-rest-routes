{
  "summary": "List issues for a repository",
  "description": "...",
  "operationId": "list-for-repo",
  "tags": [
    "issues"
  ],
  "externalDocs": {
    "description": "API method documentation",
    "url": "https://developer.github.com/v3/issues/#list-issues-for-a-repository"
  },
  "parameters": [{
      "$ref": "../../parameters.json#/owner"
    },
    {
      "$ref": "../../parameters.json#/repo"
    },
    {
      "name": "milestone",
      "in": "query",
      "schema": {
        "oneOf": [{
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          {
            "type": "string",
            "enum": ["*"]
          }
        ]
      },
      "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned."
    },
    {
      "name": "state",
      "in": "query",
      "schema": {
        "type": "string",
        "enum": [
          "open",
          "closed",
          "all"
        ],
        "default": "open"
      },
      "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`."
    },
    {
      "name": "assignee",
      "in": "query",
      "schema": {
        "type": "string"
      },
      "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user."
    },
    {
      "name": "creator",
      "in": "query",
      "schema": {
        "type": "string"
      },
      "description": "The user that created the issue."
    },
    {
      "name": "mentioned",
      "in": "query",
      "schema": {
        "type": "string"
      },
      "description": "A user that's mentioned in the issue."
    },
    {
      "name": "labels",
      "in": "query",
      "schema": {
        "type": "string"
      },
      "description": "A list of comma separated label names. Example: `bug,ui,@high`"
    },
    {
      "name": "sort",
      "in": "query",
      "schema": {
        "type": "string",
        "enum": [
          "created",
          "updated",
          "comments"
        ],
        "default": "created"
      },
      "description": "What to sort results by. Can be either `created`, `updated`, `comments`."
    },
    {
      "name": "direction",
      "in": "query",
      "schema": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "default": "desc"
      },
      "description": "The direction of the sort. Can be either `asc` or `desc`."
    },
    {
      "name": "since",
      "in": "query",
      "schema": {
        "type": "string",
        "format": "date-time"
      },
      "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."
    },
    {
      "$ref": "../../parameters.json#/per_page"
    },
    {
      "$ref": "../../parameters.json#/page"
    }
  ],
  "responses": {
    "200": {
      "description": "Paginated list of issues for a repository",
      "content": {
        "application/json": {
          "schema": {
            "type": "array",
            "items": {
              "$ref": "../../schemas.json#/issue"
            }
          }
        }
      }
    }
  }
}
