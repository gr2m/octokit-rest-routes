{
  "summary": "Create a commit",
  "description": "Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\nIn this example, the payload of the signature would be:\n\n\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
  "operationId": "git/create-commit",
  "tags": [
    "git"
  ],
  "externalDocs": {
    "description": "API method documentation",
    "url": "https://developer.github.com/enterprise/2.15/v3/git/commits/#create-a-commit"
  },
  "parameters": [
    {
      "name": "accept",
      "description": "Setting to `application/vnd.github.v3+json` is recommended",
      "in": "header",
      "schema": {
        "type": "string",
        "default": "application/vnd.github.v3+json"
      }
    },
    {
      "name": "owner",
      "in": "path",
      "schema": {
        "type": "string"
      },
      "required": true,
      "description": "owner parameter"
    },
    {
      "name": "repo",
      "in": "path",
      "schema": {
        "type": "string"
      },
      "required": true,
      "description": "repo parameter"
    }
  ],
  "responses": {
    "201": {
      "description": "response",
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "author": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "committer": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "tree": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  }
                }
              },
              "parents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "sha": {
                      "type": "string"
                    }
                  }
                }
              },
              "verification": {
                "type": "object",
                "properties": {
                  "verified": {
                    "type": "boolean"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "signature": {
                    "type": "string"
                  },
                  "payload": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "x-code-samples": [
    {
      "lang": "Shell",
      "source": "curl \\\n  -XPOST \\\n  -H\"Accept: application/vnd.github.v3+json\" \\\n  https://developer.github.com/repos/octocat/hello-world/git/commits \\\n  -d '{\"message\":\"message\",\"tree\":\"tree\",\"parents\":[\"parents\"]}'"
    },
    {
      "lang": "JS",
      "source": "octokit.git.createCommit({\n  owner: 'octocat',\n  repo: 'hello-world',\n  message: 'message',\n  tree: 'tree',\n  parents: [\n    'parents'\n  ]\n})"
    }
  ],
  "x-github": {
    "legacy": false,
    "enabledForApps": true,
    "githubCloudOnly": false
  },
  "x-changes": [],
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "description": "The commit message",
              "type": "string"
            },
            "tree": {
              "description": "The SHA of the tree object this commit points to",
              "type": "string"
            },
            "parents": {
              "description": "The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "author": {
              "description": "Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of the author (or committer) of the commit",
                  "type": "string"
                },
                "email": {
                  "description": "The email of the author (or committer) of the commit",
                  "type": "string"
                },
                "date": {
                  "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                  "type": "string"
                }
              }
            },
            "committer": {
              "description": "Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of the author (or committer) of the commit",
                  "type": "string"
                },
                "email": {
                  "description": "The email of the author (or committer) of the commit",
                  "type": "string"
                },
                "date": {
                  "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                  "type": "string"
                }
              }
            },
            "signature": {
              "description": "The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.",
              "type": "string"
            }
          },
          "required": [
            "message",
            "tree",
            "parents"
          ]
        }
      }
    }
  }
}
