[
  {
    "name": "List your repositories",
    "enabledForApps": false,
    "method": "GET",
    "path": "/user/repos",
    "params": [
      {
        "name": "visibility",
        "type": "string",
        "description": "Can be one of `all`, `public`, or `private`.",
        "default": "all",
        "required": false,
        "enum": [
          "all",
          "public",
          "private"
        ],
        "location": "query"
      },
      {
        "name": "affiliation",
        "type": "string",
        "description": "Comma-separated list of values. Can include:  \n\\* `owner`: Repositories that are owned by the authenticated user.  \n\\* `collaborator`: Repositories that the user has been added to as a collaborator.  \n\\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.",
        "default": "owner,collaborator,organization_member",
        "required": false,
        "enum": [
          "owner",
          "collaborator",
          "organization_member"
        ],
        "location": "query"
      },
      {
        "name": "type",
        "type": "string",
        "description": "Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`  \n  \nWill cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.",
        "default": "all",
        "required": false,
        "enum": [
          "all",
          "owner",
          "public",
          "private",
          "member"
        ],
        "location": "query"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
        "default": "full_name",
        "required": false,
        "enum": [
          "created",
          "updated",
          "pushed",
          "full_name"
        ],
        "location": "query"
      },
      {
        "name": "direction",
        "type": "string",
        "description": "Can be one of `asc` or `desc`.",
        "default": "when using `full_name`: `asc`; otherwise `desc`",
        "required": false,
        "enum": [
          "asc",
          "desc"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-your-repositories"
  },
  {
    "name": "List user repositories",
    "enabledForApps": true,
    "method": "GET",
    "path": "/users/:username/repos",
    "params": [
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "type",
        "type": "string",
        "description": "Can be one of `all`, `owner`, `member`.",
        "default": "owner",
        "required": false,
        "enum": [
          "all",
          "owner",
          "member"
        ],
        "location": "query"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
        "default": "full_name",
        "required": false,
        "enum": [
          "created",
          "updated",
          "pushed",
          "full_name"
        ],
        "location": "query"
      },
      {
        "name": "direction",
        "type": "string",
        "description": "Can be one of `asc` or `desc`.",
        "default": "when using `full_name`: `asc`, otherwise `desc`",
        "required": false,
        "enum": [
          "asc",
          "desc"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "List public repositories for the specified user.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-user-repositories"
  },
  {
    "name": "List organization repositories",
    "enabledForApps": true,
    "method": "GET",
    "path": "/orgs/:org/repos",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "type",
        "type": "string",
        "description": "Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`.",
        "default": "all",
        "required": false,
        "enum": [
          "all",
          "public",
          "private",
          "forks",
          "sources",
          "member"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "List repositories for the specified org.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-organization-repositories"
  },
  {
    "name": "List all public repositories",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repositories",
    "params": [
      {
        "name": "since",
        "type": "string",
        "description": "The integer ID of the last Repository that you've seen.",
        "required": false,
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "This provides a dump of every public repository, in the order that they were created.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of repositories.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-all-public-repositories"
  },
  {
    "method": "POST",
    "path": "/user/repos",
    "enabledForApps": true,
    "name": "Create a new repository for the authenticated user",
    "params": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the repository.",
        "required": true,
        "location": "body"
      },
      {
        "name": "description",
        "type": "string",
        "description": "A short description of the repository.",
        "required": false,
        "location": "body"
      },
      {
        "name": "homepage",
        "type": "string",
        "description": "A URL with more information about the repository.",
        "required": false,
        "location": "body"
      },
      {
        "name": "private",
        "type": "boolean",
        "description": "Either `true` to create a private repository or `false` to create a public one. Creating private repositories requires a paid GitHub account.",
        "default": false,
        "required": false,
        "location": "body"
      },
      {
        "name": "has_issues",
        "type": "boolean",
        "description": "Either `true` to enable issues for this repository or `false` to disable them.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "has_projects",
        "type": "boolean",
        "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "has_wiki",
        "type": "boolean",
        "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "team_id",
        "type": "integer",
        "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
        "required": false,
        "location": "body"
      },
      {
        "name": "auto_init",
        "type": "boolean",
        "description": "Pass `true` to create an initial commit with empty README.",
        "default": false,
        "required": false,
        "location": "body"
      },
      {
        "name": "gitignore_template",
        "type": "string",
        "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
        "required": false,
        "location": "body"
      },
      {
        "name": "license_template",
        "type": "string",
        "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
        "required": false,
        "location": "body"
      },
      {
        "name": "allow_squash_merge",
        "type": "boolean",
        "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "allow_merge_commit",
        "type": "boolean",
        "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "allow_rebase_merge",
        "type": "boolean",
        "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
        "default": true,
        "required": false,
        "location": "body"
      }
    ],
    "description": "**Note**: There are two endpoints for creating a repository: one to create a repository on a user account, and one to create a repository in an organization. The organization endpoint is fully enabled for [GitHub Apps](https://developer.github.com/v3/apps/available-endpoints/), whereas the user endpoint is enabled only for [user-to-server requests](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#user-to-server-requests).\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository\n*   `repo` scope to create a private repository",
    "documentationUrl": "https://developer.github.com/v3/repos/#create"
  },
  {
    "method": "POST",
    "path": "/orgs/:org/repos",
    "enabledForApps": true,
    "name": "Create a new repository in this organization",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "name",
        "type": "string",
        "description": "The name of the repository.",
        "required": true,
        "location": "body"
      },
      {
        "name": "description",
        "type": "string",
        "description": "A short description of the repository.",
        "required": false,
        "location": "body"
      },
      {
        "name": "homepage",
        "type": "string",
        "description": "A URL with more information about the repository.",
        "required": false,
        "location": "body"
      },
      {
        "name": "private",
        "type": "boolean",
        "description": "Either `true` to create a private repository or `false` to create a public one. Creating private repositories requires a paid GitHub account.",
        "default": false,
        "required": false,
        "location": "body"
      },
      {
        "name": "has_issues",
        "type": "boolean",
        "description": "Either `true` to enable issues for this repository or `false` to disable them.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "has_projects",
        "type": "boolean",
        "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "has_wiki",
        "type": "boolean",
        "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "team_id",
        "type": "integer",
        "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
        "required": false,
        "location": "body"
      },
      {
        "name": "auto_init",
        "type": "boolean",
        "description": "Pass `true` to create an initial commit with empty README.",
        "default": false,
        "required": false,
        "location": "body"
      },
      {
        "name": "gitignore_template",
        "type": "string",
        "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
        "required": false,
        "location": "body"
      },
      {
        "name": "license_template",
        "type": "string",
        "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
        "required": false,
        "location": "body"
      },
      {
        "name": "allow_squash_merge",
        "type": "boolean",
        "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "allow_merge_commit",
        "type": "boolean",
        "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "allow_rebase_merge",
        "type": "boolean",
        "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
        "default": true,
        "required": false,
        "location": "body"
      }
    ],
    "description": "**Note**: There are two endpoints for creating a repository: one to create a repository on a user account, and one to create a repository in an organization. The organization endpoint is fully enabled for [GitHub Apps](https://developer.github.com/v3/apps/available-endpoints/), whereas the user endpoint is enabled only for [user-to-server requests](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#user-to-server-requests).\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository\n*   `repo` scope to create a private repository",
    "documentationUrl": "https://developer.github.com/v3/repos/#create"
  },
  {
    "name": "Get",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.",
    "documentationUrl": "https://developer.github.com/v3/repos/#get"
  },
  {
    "name": "Edit",
    "enabledForApps": true,
    "method": "PATCH",
    "path": "/repos/:owner/:repo",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "name",
        "type": "string",
        "description": "The name of the repository.",
        "required": true,
        "location": "body"
      },
      {
        "name": "description",
        "type": "string",
        "description": "A short description of the repository.",
        "required": false,
        "location": "body"
      },
      {
        "name": "homepage",
        "type": "string",
        "description": "A URL with more information about the repository.",
        "required": false,
        "location": "body"
      },
      {
        "name": "private",
        "type": "boolean",
        "description": "Either `true` to make the repository private or `false` to make it public. Creating private repositories requires a paid GitHub account. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
        "default": false,
        "required": false,
        "location": "body"
      },
      {
        "name": "has_issues",
        "type": "boolean",
        "description": "Either `true` to enable issues for this repository or `false` to disable them.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "has_projects",
        "type": "boolean",
        "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "has_wiki",
        "type": "boolean",
        "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "default_branch",
        "type": "string",
        "description": "Updates the default branch for this repository.",
        "required": false,
        "location": "body"
      },
      {
        "name": "allow_squash_merge",
        "type": "boolean",
        "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "allow_merge_commit",
        "type": "boolean",
        "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "allow_rebase_merge",
        "type": "boolean",
        "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "archived",
        "type": "boolean",
        "description": "`true` to archive this repository. **Note**: You cannot unarchive repositories through the API.",
        "default": false,
        "required": false,
        "location": "body"
      }
    ],
    "description": "**Note**: To edit a repository's topics, use the [`topics` endpoint](#replace-all-topics-for-a-repository).",
    "documentationUrl": "https://developer.github.com/v3/repos/#edit"
  },
  {
    "name": "List all topics for a repository",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/topics",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-all-topics-for-a-repository"
  },
  {
    "name": "Replace all topics for a repository",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/repos/:owner/:repo/topics",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "names",
        "type": "string[]",
        "description": "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository.",
        "required": true,
        "location": "body"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/#replace-all-topics-for-a-repository"
  },
  {
    "name": "List contributors",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/contributors",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "anon",
        "type": "string",
        "description": "Set to `1` or `true` to include anonymous contributors in results.",
        "required": false,
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.\n\nGitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-contributors"
  },
  {
    "name": "List languages",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/languages",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-languages"
  },
  {
    "name": "List teams",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/teams",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-teams"
  },
  {
    "name": "List tags",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/tags",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-tags"
  },
  {
    "name": "Delete a repository",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.\n\nIf an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:",
    "documentationUrl": "https://developer.github.com/v3/repos/#delete-a-repository"
  },
  {
    "name": "Transfer a repository",
    "enabledForApps": false,
    "method": "POST",
    "path": "/repos/:owner/:repo/transfer",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "new_owner",
        "type": "string",
        "description": "**Required:** The username or organization name the repository will be transferred to.",
        "required": false,
        "location": "body"
      },
      {
        "name": "team_id",
        "type": "integer[]",
        "description": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
        "required": false,
        "location": "body"
      }
    ],
    "description": "A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).",
    "documentationUrl": "https://developer.github.com/v3/repos/#transfer-a-repository"
  },
  {
    "name": "List branches",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/branches",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "protected",
        "type": "boolean",
        "description": "Setting to `true` returns only protected branches.",
        "required": false,
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#list-branches"
  },
  {
    "name": "Get branch",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/branches/:branch",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-branch"
  },
  {
    "name": "Get branch protection",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/branches/:branch/protection",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-branch-protection"
  },
  {
    "name": "Update branch protection",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/repos/:owner/:repo/branches/:branch/protection",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "required_status_checks",
        "type": "object",
        "description": "Require status checks to pass before merging. Set to `null` to disable.",
        "required": true,
        "allowNull": true,
        "location": "body"
      },
      {
        "name": "required_status_checks.strict",
        "type": "boolean",
        "description": "Require branches to be up to date before merging.",
        "required": true,
        "location": "body"
      },
      {
        "name": "required_status_checks.contexts",
        "type": "string[]",
        "description": "The list of status checks to require in order to merge into this branch",
        "required": true,
        "location": "body"
      },
      {
        "name": "enforce_admins",
        "type": "boolean",
        "description": "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.",
        "required": true,
        "allowNull": true,
        "location": "body"
      },
      {
        "name": "required_pull_request_reviews",
        "type": "object",
        "description": "Require at least one approving review on a pull request, before merging. Set to `null` to disable.",
        "required": true,
        "allowNull": true,
        "location": "body"
      },
      {
        "name": "required_pull_request_reviews.dismissal_restrictions",
        "type": "object",
        "description": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
        "required": false,
        "location": "body"
      },
      {
        "name": "required_pull_request_reviews.dismissal_restrictions.users",
        "type": "string[]",
        "description": "The list of user `login`s with dismissal access",
        "required": false,
        "location": "body"
      },
      {
        "name": "required_pull_request_reviews.dismissal_restrictions.teams",
        "type": "string[]",
        "description": "The list of team `slug`s with dismissal access",
        "required": false,
        "location": "body"
      },
      {
        "name": "required_pull_request_reviews.dismiss_stale_reviews",
        "type": "boolean",
        "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
        "required": false,
        "location": "body"
      },
      {
        "name": "required_pull_request_reviews.require_code_owner_reviews",
        "type": "boolean",
        "description": "Blocks merging pull requests until code owners review them.",
        "required": false,
        "location": "body"
      },
      {
        "name": "required_pull_request_reviews.required_approving_review_count",
        "type": "integer",
        "description": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
        "required": false,
        "location": "body"
      },
      {
        "name": "restrictions",
        "type": "object",
        "description": "Restrict who can push to this branch. Team and user `restrictions` are only available for organization-owned repositories. Set to `null` to disable.",
        "required": true,
        "allowNull": true,
        "location": "body"
      },
      {
        "name": "restrictions.users",
        "type": "string[]",
        "description": "The list of user `login`s with push access",
        "required": false,
        "location": "body"
      },
      {
        "name": "restrictions.teams",
        "type": "string[]",
        "description": "The list of team `slug`s with push access",
        "required": false,
        "location": "body"
      }
    ],
    "description": "Protecting a branch requires admin or owner permissions to the repository.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n\n**Note**: The list of users and teams in total is limited to 100 items.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#update-branch-protection"
  },
  {
    "name": "Remove branch protection",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/branches/:branch/protection",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-branch-protection"
  },
  {
    "name": "Get required status checks of protected branch",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-required-status-checks-of-protected-branch"
  },
  {
    "name": "Update required status checks of protected branch",
    "enabledForApps": true,
    "method": "PATCH",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "strict",
        "type": "boolean",
        "description": "Require branches to be up to date before merging.",
        "required": false,
        "location": "body"
      },
      {
        "name": "contexts",
        "type": "string[]",
        "description": "The list of status checks to require in order to merge into this branch",
        "required": false,
        "location": "body"
      }
    ],
    "description": "Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#update-required-status-checks-of-protected-branch"
  },
  {
    "name": "Remove required status checks of protected branch",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-required-status-checks-of-protected-branch"
  },
  {
    "name": "List required status checks contexts of protected branch",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#list-required-status-checks-contexts-of-protected-branch"
  },
  {
    "name": "Replace required status checks contexts of protected branch",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#replace-required-status-checks-contexts-of-protected-branch"
  },
  {
    "name": "Add required status checks contexts of protected branch",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#add-required-status-checks-contexts-of-protected-branch"
  },
  {
    "name": "Remove required status checks contexts of protected branch",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-required-status-checks-contexts-of-protected-branch"
  },
  {
    "name": "Get pull request review enforcement of protected branch",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-pull-request-review-enforcement-of-protected-branch"
  },
  {
    "name": "Update pull request review enforcement of protected branch",
    "enabledForApps": true,
    "method": "PATCH",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "dismissal_restrictions",
        "type": "object",
        "description": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
        "required": false,
        "location": "body"
      },
      {
        "name": "dismissal_restrictions.users",
        "type": "string[]",
        "description": "The list of user `login`s with dismissal access",
        "required": false,
        "location": "body"
      },
      {
        "name": "dismissal_restrictions.teams",
        "type": "string[]",
        "description": "The list of team `slug`s with dismissal access",
        "required": false,
        "location": "body"
      },
      {
        "name": "dismiss_stale_reviews",
        "type": "boolean",
        "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
        "required": false,
        "location": "body"
      },
      {
        "name": "require_code_owner_reviews",
        "type": "boolean",
        "description": "Blocks merging pull requests until code owners have reviewed.",
        "required": false,
        "location": "body"
      },
      {
        "name": "required_approving_review_count",
        "type": "integer",
        "description": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
        "required": false,
        "location": "body"
      }
    ],
    "description": "Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#update-pull-request-review-enforcement-of-protected-branch"
  },
  {
    "name": "Remove pull request review enforcement of protected branch",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-pull-request-review-enforcement-of-protected-branch"
  },
  {
    "name": "Get required signatures of protected branch",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n\n**Note**: You must enable branch protection to require signed commits.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-required-signatures-of-protected-branch"
  },
  {
    "name": "Add required signatures of protected branch",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#add-required-signatures-of-protected-branch"
  },
  {
    "name": "Remove required signatures of protected branch",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-required-signatures-of-protected-branch"
  },
  {
    "name": "Get admin enforcement of protected branch",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-admin-enforcement-of-protected-branch"
  },
  {
    "name": "Add admin enforcement of protected branch",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#add-admin-enforcement-of-protected-branch"
  },
  {
    "name": "Remove admin enforcement of protected branch",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-admin-enforcement-of-protected-branch"
  },
  {
    "name": "Get restrictions of protected branch",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "**Note**: Teams and users `restrictions` are only available for organization-owned repositories.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-restrictions-of-protected-branch"
  },
  {
    "name": "Remove restrictions of protected branch",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Disables the ability to restrict who can push to this branch.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-restrictions-of-protected-branch"
  },
  {
    "name": "List team restrictions of protected branch",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Lists the teams who have push access to this branch. If you pass the `hellcat-preview` media type, the list includes child teams.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#list-team-restrictions-of-protected-branch"
  },
  {
    "name": "Replace team restrictions of protected branch",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. If you pass the `hellcat-preview` media type, you can include child teams.\n\n| Type    | Description                                                                                                                         |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users and teams in total is limited to 100 items. |",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#replace-team-restrictions-of-protected-branch"
  },
  {
    "name": "Add team restrictions of protected branch",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Grants the specified teams push access for this branch. If you pass the `hellcat-preview` media type, you can also give push access to child teams.\n\n| Type    | Description                                                                                                                         |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users and teams in total is limited to 100 items. |",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#add-team-restrictions-of-protected-branch"
  },
  {
    "name": "Remove team restrictions of protected branch",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Removes the ability of a team to push to this branch. If you pass the `hellcat-preview` media type, you can include child teams.\n\n| Type    | Description                                                                                                                                  |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users and teams in total is limited to 100 items. |",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-team-restrictions-of-protected-branch"
  },
  {
    "name": "List user restrictions of protected branch",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Lists the people who have push access to this branch.",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#list-user-restrictions-of-protected-branch"
  },
  {
    "name": "Replace user restrictions of protected branch",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n\n| Type    | Description                                                                                                            |\n| ------- | ---------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users and teams in total is limited to 100 items. |",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#replace-user-restrictions-of-protected-branch"
  },
  {
    "name": "Add user restrictions of protected branch",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Grants the specified people push access for this branch.\n\n| Type    | Description                                                                                                            |\n| ------- | ---------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users and teams in total is limited to 100 items. |",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#add-user-restrictions-of-protected-branch"
  },
  {
    "name": "Remove user restrictions of protected branch",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "branch",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Removes the ability of a team to push to this branch.\n\n| Type    | Description                                                                                                                            |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users and teams in total is limited to 100 items. |",
    "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-user-restrictions-of-protected-branch"
  },
  {
    "name": "List collaborators",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/collaborators",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "affiliation",
        "type": "string",
        "description": "Filter collaborators returned by their affiliation. Can be one of:  \n\\* `outside`: All outside collaborators of an organization-owned repository.  \n\\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
        "default": "all",
        "required": false,
        "enum": [
          "outside",
          "direct",
          "all"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nIf you pass the `hellcat-preview` media type, team members will include the members of child teams.",
    "documentationUrl": "https://developer.github.com/v3/repos/collaborators/#list-collaborators"
  },
  {
    "name": "Check if a user is a collaborator",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/collaborators/:username",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nIf you pass the `hellcat-preview` media type, team members will include the members of child teams.",
    "documentationUrl": "https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator"
  },
  {
    "name": "Review a user's permission level",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/collaborators/:username/permission",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Possible values for the `permission` key: `admin`, `write`, `read`, `none`.",
    "documentationUrl": "https://developer.github.com/v3/repos/collaborators/#review-a-users-permission-level"
  },
  {
    "name": "Add user as a collaborator",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/repos/:owner/:repo/collaborators/:username",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "permission",
        "type": "string",
        "description": "The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  \n\\* `pull` \\- can pull, but not push to or administer this repository.  \n\\* `push` \\- can pull and push, but not administer this repository.  \n\\* `admin` \\- can pull, push and administer this repository.",
        "default": "push",
        "required": false,
        "enum": [
          "pull",
          "push",
          "admin"
        ],
        "location": "body"
      }
    ],
    "description": "Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"\n\nThe invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://developer.github.com/v3/repos/invitations/).\n\n**Rate limits**\n\nTo prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.",
    "documentationUrl": "https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator"
  },
  {
    "name": "Remove user as a collaborator",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/collaborators/:username",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/collaborators/#remove-user-as-a-collaborator"
  },
  {
    "name": "List commit comments for a repository",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/comments",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Commit Comments use [these custom media types](#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\nComments are ordered by ascending ID.",
    "documentationUrl": "https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository"
  },
  {
    "name": "List comments for a single commit",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/commits/:ref/comments",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/comments/#list-comments-for-a-single-commit"
  },
  {
    "name": "Create a commit comment",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/commits/:sha/comments",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "sha",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "body",
        "type": "string",
        "description": "The contents of the comment.",
        "required": true,
        "location": "body"
      },
      {
        "name": "path",
        "type": "string",
        "description": "Relative path of the file to comment on.",
        "required": false,
        "location": "body"
      },
      {
        "name": "position",
        "type": "integer",
        "description": "Line index in the diff to comment on.",
        "required": false,
        "location": "body"
      },
      {
        "name": "line",
        "type": "integer",
        "description": "**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.",
        "required": false,
        "location": "body"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/comments/#create-a-commit-comment"
  },
  {
    "name": "Get a single commit comment",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/comments/:comment_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "comment_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/comments/#get-a-single-commit-comment"
  },
  {
    "name": "Update a commit comment",
    "enabledForApps": true,
    "method": "PATCH",
    "path": "/repos/:owner/:repo/comments/:comment_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "comment_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "body",
        "type": "string",
        "description": "The contents of the comment",
        "required": true,
        "location": "body"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/comments/#update-a-commit-comment"
  },
  {
    "name": "Delete a commit comment",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/comments/:comment_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "comment_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/comments/#delete-a-commit-comment"
  },
  {
    "name": "List commits on a repository",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/commits",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "sha",
        "type": "string",
        "description": "SHA or branch to start listing commits from.",
        "default": "the repository’s default branch (usually `master`).",
        "required": false,
        "location": "query"
      },
      {
        "name": "path",
        "type": "string",
        "description": "Only commits containing this file path will be returned.",
        "required": false,
        "location": "query"
      },
      {
        "name": "author",
        "type": "string",
        "description": "GitHub login or email address by which to filter by commit author.",
        "required": false,
        "location": "query"
      },
      {
        "name": "since",
        "type": "string",
        "description": "Only commits after this date will be returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "required": false,
        "location": "query"
      },
      {
        "name": "until",
        "type": "string",
        "description": "Only commits before this date will be returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "required": false,
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository"
  },
  {
    "name": "Get a single commit",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/commits/:sha",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "sha",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Diffs with binary data will have no 'patch' property. Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
    "documentationUrl": "https://developer.github.com/v3/repos/commits/#get-a-single-commit"
  },
  {
    "name": "Get the SHA-1 of a commit reference",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/commits/:ref",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Users with read access can get the SHA-1 of a commit reference:\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n\n\nTo check if a remote reference's SHA-1 is the same as your local reference's SHA-1, make a `GET` request and provide the current SHA-1 for the local reference as the ETag.\n\nThe SHA-1 of the commit reference.\n\n",
    "documentationUrl": "https://developer.github.com/v3/repos/commits/#get-the-sha-1-of-a-commit-reference"
  },
  {
    "name": "Compare two commits",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/compare/:base...:head",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "base",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "head",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`. For example:\n\n```\nGET /repos/:owner/:repo/compare/hubot:branchname...octocat:branchname\n```\n\nThe response from the API is equivalent to running the `git log base..head` command; however, commits are returned in reverse chronological order.\n\nPass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n\n**Working with large comparisons**\n\nThe response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [Commit List API](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository) to enumerate all commits in the range.\n\nFor comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long to generate. You can typically resolve this error by using a smaller commit range.",
    "documentationUrl": "https://developer.github.com/v3/repos/commits/#compare-two-commits"
  },
  {
    "name": "Retrieve community profile metrics",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:name/community/profile",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "name",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "This endpoint will return all community profile metrics, including an overall health score, repository description, the presence of documentation, detected code of conduct, detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST_TEMPLATE, README, and CONTRIBUTING files.",
    "documentationUrl": "https://developer.github.com/v3/repos/community/#retrieve-community-profile-metrics"
  },
  {
    "name": "Get the README",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/readme",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "description": "The name of the commit/branch/tag.",
        "default": "the repository’s default branch (usually `master`)",
        "required": false,
        "location": "query"
      }
    ],
    "description": "This method returns the preferred README for a repository.\n\nREADMEs support [custom media types](#custom-media-types) for retrieving the raw content or rendered HTML.",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#get-the-readme"
  },
  {
    "name": "Get contents",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/contents/:path",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "path",
        "type": "string",
        "description": "The content path.",
        "required": true,
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "description": "The name of the commit/branch/tag.",
        "default": "the repository’s default branch (usually `master`)",
        "required": false,
        "location": "query"
      }
    ],
    "description": "This method returns the contents of a file or directory in a repository.\n\nFiles and symlinks support [a custom media type](#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](#custom-media-types) to ensure the content is returned in a consistent object format.\n\n**Note**:\n\n*   To get a repository's contents recursively, you can [recursively get the tree](https://developer.github.com/v3/git/trees/).\n*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://developer.github.com/v3/git/trees/#get-a-tree).\n*   This API supports files up to 1 megabyte in size.\n\nThe response will be an array of objects, one object for each item in the directory.\n\nWhen listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value _should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \"submodule\".\n\nIf the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the API responds with the content of the file (in the [format shown above](#response-if-content-is-a-file)).\n\nOtherwise, the API responds with an object describing the symlink itself:\n\nThe `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit.\n\nIf the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the github.com URLs (`html_url` and `_links[\"html\"]`) will have null values.",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#get-contents"
  },
  {
    "name": "Create a file",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/repos/:owner/:repo/contents/:path",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "path",
        "type": "string",
        "description": "The content path.",
        "required": true,
        "location": "url"
      },
      {
        "name": "message",
        "type": "string",
        "description": "The commit message.",
        "required": true,
        "location": "body"
      },
      {
        "name": "content",
        "type": "string",
        "description": "The new file content, Base64 encoded.",
        "required": true,
        "location": "body"
      },
      {
        "name": "branch",
        "type": "string",
        "description": "The branch name.",
        "default": "the repository’s default branch (usually `master`)",
        "required": false,
        "location": "body"
      },
      {
        "name": "committer",
        "type": "object",
        "description": "object containing information about the committer.",
        "location": "body"
      },
      {
        "name": "author",
        "type": "object",
        "description": "object containing information about the author.",
        "location": "body"
      }
    ],
    "description": "This method creates a new file in a repository\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                          |\n| ----- | ------ | ---------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit  |\n| email | string | The email of the author (or committer) of the commit |",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#create-a-file"
  },
  {
    "name": "Update a file",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/repos/:owner/:repo/contents/:path",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "path",
        "type": "string",
        "description": "The content path.",
        "required": true,
        "location": "url"
      },
      {
        "name": "message",
        "type": "string",
        "description": "The commit message.",
        "required": true,
        "location": "body"
      },
      {
        "name": "content",
        "type": "string",
        "description": "The updated file content, Base64 encoded.",
        "required": true,
        "location": "body"
      },
      {
        "name": "sha",
        "type": "string",
        "description": "The blob SHA of the file being replaced.",
        "required": true,
        "location": "body"
      },
      {
        "name": "branch",
        "type": "string",
        "description": "The branch name.",
        "default": "the repository’s default branch (usually `master`)",
        "required": false,
        "location": "body"
      },
      {
        "name": "committer",
        "type": "object",
        "description": "object containing information about the committer.",
        "location": "body"
      },
      {
        "name": "author",
        "type": "object",
        "description": "object containing information about the author.",
        "location": "body"
      }
    ],
    "description": "This method updates a file in a repository\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                          |\n| ----- | ------ | ---------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit  |\n| email | string | The email of the author (or committer) of the commit |",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#update-a-file"
  },
  {
    "name": "Delete a file",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/contents/:path",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "path",
        "type": "string",
        "description": "The content path.",
        "required": true,
        "location": "url"
      },
      {
        "name": "message",
        "type": "string",
        "description": "The commit message.",
        "required": true,
        "location": "body"
      },
      {
        "name": "sha",
        "type": "string",
        "description": "The blob SHA of the file being replaced.",
        "required": true,
        "location": "body"
      },
      {
        "name": "branch",
        "type": "string",
        "description": "The branch name.",
        "default": "the repository’s default branch (usually `master`)",
        "required": false,
        "location": "body"
      },
      {
        "name": "committer",
        "type": "object",
        "description": "object containing information about the committer.",
        "location": "body"
      },
      {
        "name": "author",
        "type": "object",
        "description": "object containing information about the author.",
        "location": "body"
      }
    ],
    "description": "This method deletes a file in a repository\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                          |\n| ----- | ------ | ---------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit  |\n| email | string | The email of the author (or committer) of the commit |",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#delete-a-file"
  },
  {
    "name": "Get archive link",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/:archive_format/:ref",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "archive_format",
        "type": "string",
        "description": "Can be either `tarball` or `zipball`.",
        "default": "tarball",
        "required": true,
        "enum": [
          "tarball",
          "zipball"
        ],
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "description": "A valid Git reference.",
        "default": "the repository’s default branch (usually `master`)",
        "required": true,
        "location": "url"
      }
    ],
    "description": "This method will return a `302` to a URL to download a tarball or zipball archive for a repository. Please make sure your HTTP framework is configured to follow redirects or you will need to use the `Location` header to make a second `GET` request.\n\n_Note_: For private repositories, these links are temporary and expire after five minutes.\n\nTo follow redirects with curl, use the `-L` switch:\n\n",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#get-archive-link"
  },
  {
    "name": "List deploy keys",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/keys",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/keys/#list-deploy-keys"
  },
  {
    "name": "Get a deploy key",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/keys/:key_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "key_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/keys/#get-a-deploy-key"
  },
  {
    "name": "Add a new deploy key",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/keys",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "title",
        "type": "string",
        "description": "A name for the key.",
        "required": false,
        "location": "body"
      },
      {
        "name": "key",
        "type": "string",
        "description": "The contents of the key.",
        "required": true,
        "location": "body"
      },
      {
        "name": "read_only",
        "type": "boolean",
        "description": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.",
        "required": false,
        "location": "body"
      }
    ],
    "description": "Here's how you can create a read-only deploy key:\n\n",
    "documentationUrl": "https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key"
  },
  {
    "name": "Remove a deploy key",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/keys/:key_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "key_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/keys/#remove-a-deploy-key"
  },
  {
    "name": "List deployments",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/deployments",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "sha",
        "type": "string",
        "description": "The SHA that was recorded at creation time.",
        "default": "none",
        "required": false,
        "location": "query"
      },
      {
        "name": "ref",
        "type": "string",
        "description": "The name of the ref. This can be a branch, tag, or SHA.",
        "default": "none",
        "required": false,
        "location": "query"
      },
      {
        "name": "task",
        "type": "string",
        "description": "The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).",
        "default": "none",
        "required": false,
        "location": "query"
      },
      {
        "name": "environment",
        "type": "string",
        "description": "The name of the environment that was deployed to (e.g., `staging` or `production`).",
        "default": "none",
        "required": false,
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/deployments/#list-deployments"
  },
  {
    "name": "Get a single deployment",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/deployments/:deployment_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "deployment_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "\n\n**Note:** If a user created a deployment via a GitHub App, the `performed_via_github_app` key will contain information on that GitHub App.",
    "documentationUrl": "https://developer.github.com/v3/repos/deployments/#get-a-single-deployment"
  },
  {
    "name": "Create a deployment",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/deployments",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "description": "The ref to deploy. This can be a branch, tag, or SHA.",
        "required": true,
        "location": "body"
      },
      {
        "name": "task",
        "type": "string",
        "description": "Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).",
        "default": "deploy",
        "required": false,
        "location": "body"
      },
      {
        "name": "auto_merge",
        "type": "boolean",
        "description": "Attempts to automatically merge the default branch into the requested ref, if it is behind the default branch.",
        "default": true,
        "required": false,
        "location": "body"
      },
      {
        "name": "required_contexts",
        "type": "string[]",
        "description": "The status contexts to verify against commit status checks. If this parameter is omitted, then all unique contexts will be verified before a deployment is created. To bypass checking entirely pass an empty array. Defaults to all unique contexts.",
        "required": false,
        "location": "body"
      },
      {
        "name": "payload",
        "type": "string",
        "description": "JSON payload with extra information about the deployment.",
        "default": "\"\"",
        "required": false,
        "location": "body"
      },
      {
        "name": "environment",
        "type": "string",
        "description": "Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
        "default": "production",
        "required": false,
        "location": "body"
      },
      {
        "name": "description",
        "type": "string",
        "description": "Short description of the deployment.",
        "default": "\"\"",
        "required": false,
        "location": "body"
      },
      {
        "name": "transient_environment",
        "type": "boolean",
        "description": "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. **This parameter requires a custom media type to be specified. Please see more in the alert below.**",
        "default": false,
        "required": false,
        "location": "body"
      },
      {
        "name": "production_environment",
        "type": "boolean",
        "description": "Specifies if the given environment is one that end-users directly interact with. **This parameter requires a custom media type to be specified. Please see more in the alert below.**",
        "default": "`true` when `environment` is `production` and `false` otherwise",
        "required": false,
        "location": "body"
      }
    ],
    "description": "Deployments offer a few configurable parameters with sane defaults.\n\nThe `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them before we merge a pull request.\n\nThe `environment` parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This allows for easy tracking of which environments had deployments requested. The default environment is `production`.\n\nThe `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response.\n\nBy default, [commit statuses](https://developer.github.com/v3/repos/statuses) for every submitted context must be in a `success` state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed.\n\nThe `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched.\n\nThe `task` parameter is used by the deployment system to allow different execution paths. In the web world this might be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled.\n\nUsers with `repo` or `repo_deployment` scopes can create a deployment for a given ref:\n\nA simple example putting the user and room into the payload to notify back to chat networks.\n\nA more advanced example specifying required commit statuses and bypassing auto-merging.\n\nThis error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.\n\nThis error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success` status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.",
    "documentationUrl": "https://developer.github.com/v3/repos/deployments/#create-a-deployment"
  },
  {
    "name": "List deployment statuses",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/deployments/:deployment_id/statuses",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "deployment_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "id",
        "type": "integer",
        "description": "The deployment ID to list the statuses from.",
        "required": true,
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Users with pull access can view deployment statuses for a deployment:",
    "documentationUrl": "https://developer.github.com/v3/repos/deployments/#list-deployment-statuses"
  },
  {
    "name": "Get a single deployment status",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "deployment_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "id",
        "type": "integer",
        "description": "The deployment ID to list the statuses from.",
        "required": true,
        "location": "query"
      },
      {
        "name": "status_id",
        "type": "integer",
        "description": "The deployment status ID.",
        "required": true,
        "location": "url"
      }
    ],
    "description": "Users with pull access can view a deployment status for a deployment:\n\n\n\n**Note:** If a user created a deployment status via a GitHub App, the `performed_via_github_app` key will contain information on that GitHub App.",
    "documentationUrl": "https://developer.github.com/v3/repos/deployments/#get-a-single-deployment-status"
  },
  {
    "name": "Create a deployment status",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/deployments/:deployment_id/statuses",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "deployment_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "state",
        "type": "string",
        "description": "The state of the status. Can be one of `error`, `failure`, `inactive`, `pending`, or `success`. **The `inactive` state requires a custom media type to be specified. Please see more in the alert below.**",
        "required": true,
        "enum": [
          "error",
          "failure",
          "inactive",
          "pending",
          "success"
        ],
        "location": "body"
      },
      {
        "name": "target_url",
        "type": "string",
        "description": "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.",
        "default": "\"\"",
        "required": false,
        "location": "body"
      },
      {
        "name": "log_url",
        "type": "string",
        "description": "This is functionally equivalent to `target_url`. We will continue accept `target_url` to support legacy uses, but we recommend modifying this to the new name to avoid confusion. **This parameter requires a custom media type to be specified. Please see more in the alert below.**",
        "default": "\"\"",
        "required": false,
        "location": "body"
      },
      {
        "name": "description",
        "type": "string",
        "description": "A short description of the status. Maximum length of 140 characters.",
        "default": "\"\"",
        "required": false,
        "location": "body"
      },
      {
        "name": "environment_url",
        "type": "string",
        "description": "Sets the URL for accessing your environment. **This parameter requires a custom media type to be specified. Please see more in the alert below.**",
        "default": "\"\"",
        "required": false,
        "location": "body"
      },
      {
        "name": "auto_inactive",
        "type": "boolean",
        "description": "Adds a new `inactive` status to all non-transient, non-production environment deployments with the same repository and environment name as the created status's deployment. **This parameter requires a custom media type to be specified. Please see more in the alert below.**",
        "default": true,
        "required": false,
        "location": "body"
      }
    ],
    "description": "Users with push access can create deployment statuses for a given deployment:",
    "documentationUrl": "https://developer.github.com/v3/repos/deployments/#create-a-deployment-status"
  },
  {
    "name": "List downloads for a repository",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/downloads",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/downloads/#list-downloads-for-a-repository"
  },
  {
    "name": "Get a single download",
    "enabledForApps": false,
    "method": "GET",
    "path": "/repos/:owner/:repo/downloads/:download_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "download_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/downloads/#get-a-single-download"
  },
  {
    "name": "Delete a download",
    "enabledForApps": false,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/downloads/:download_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "download_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/downloads/#delete-a-download"
  },
  {
    "name": "List forks",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/forks",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "The sort order. Can be either `newest`, `oldest`, or `stargazers`.",
        "default": "newest",
        "required": false,
        "enum": [
          "newest",
          "oldest",
          "stargazers"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/forks/#list-forks"
  },
  {
    "name": "Create a fork",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/forks",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "organization",
        "type": "string",
        "description": "Optional parameter to specify the organization name if forking into an organization.",
        "required": false,
        "location": "body"
      }
    ],
    "description": "Create a fork for the authenticated user.\n\nForking a Repository happens asynchronously. Therefore, you may have to wait a short period before accessing the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub support](https://github.com/contact).",
    "documentationUrl": "https://developer.github.com/v3/repos/forks/#create-a-fork"
  },
  {
    "name": "List invitations for a repository",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/invitations",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.\n\n",
    "documentationUrl": "https://developer.github.com/v3/repos/invitations/#list-invitations-for-a-repository"
  },
  {
    "name": "Delete a repository invitation",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/invitations/:invitation_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "invitation_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation"
  },
  {
    "name": "Update a repository invitation",
    "enabledForApps": true,
    "method": "PATCH",
    "path": "/repos/:owner/:repo/invitations/:invitation_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "invitation_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "permissions",
        "type": "string",
        "description": "The permissions that the associated user will have on the repository. Valid values are `read`, `write`, and `admin`.",
        "required": false,
        "enum": [
          "read",
          "write",
          "admin"
        ],
        "location": "body"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation"
  },
  {
    "name": "List a user's repository invitations",
    "enabledForApps": false,
    "method": "GET",
    "path": "/user/repository_invitations",
    "params": [
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "When authenticating as a user, this endpoint will list all currently open repository invitations for that user.\n\n",
    "documentationUrl": "https://developer.github.com/v3/repos/invitations/#list-a-users-repository-invitations"
  },
  {
    "name": "Accept a repository invitation",
    "enabledForApps": false,
    "method": "PATCH",
    "path": "/user/repository_invitations/:invitation_id",
    "params": [
      {
        "name": "invitation_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation"
  },
  {
    "name": "Decline a repository invitation",
    "enabledForApps": false,
    "method": "DELETE",
    "path": "/user/repository_invitations/:invitation_id",
    "params": [
      {
        "name": "invitation_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation"
  },
  {
    "name": "Perform a merge",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/merges",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "base",
        "type": "string",
        "description": "The name of the base branch that the head will be merged into.",
        "required": true,
        "location": "body"
      },
      {
        "name": "head",
        "type": "string",
        "description": "The head to merge. This can be a branch name or a commit SHA1.",
        "required": true,
        "location": "body"
      },
      {
        "name": "commit_message",
        "type": "string",
        "description": "Commit message to use for the merge commit. If omitted, a default message will be used.",
        "required": false,
        "location": "body"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/merging/#perform-a-merge"
  },
  {
    "name": "Get information about a Pages site",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/pages",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Responses during the preview period contain two additional fields:\n\n*   `html_url`: The absolute URL (with scheme) to the rendered site. For example, `https://username.github.io`.\n*   `source`: Information about the source branch and directory for the rendered site. The source field includes:\n    *   `branch`: The repo branch for [site source files](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/) For example, _master_ or _gh-pages_.\n    *   `path`: The repo directory from which the site publishes. Can be either `/` or `/docs`.",
    "documentationUrl": "https://developer.github.com/v3/repos/pages/#get-information-about-a-pages-site"
  },
  {
    "name": "Request a page build",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/pages/builds",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n\nBuild requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.",
    "documentationUrl": "https://developer.github.com/v3/repos/pages/#request-a-page-build"
  },
  {
    "name": "List Pages builds",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/pages/builds",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/pages/#list-pages-builds"
  },
  {
    "name": "Get latest Pages build",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/pages/builds/latest",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/pages/#get-latest-pages-build"
  },
  {
    "name": "Get a specific Pages build",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/pages/builds/:build_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "build_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/pages/#get-a-specific-pages-build"
  },
  {
    "name": "List releases for a repository",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/releases",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://developer.github.com/v3/repos/#list-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases.",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository"
  },
  {
    "name": "Get a single release",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/releases/:release_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "release_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://developer.github.com/v3/#hypermedia).",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#get-a-single-release"
  },
  {
    "name": "Get the latest release",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/releases/latest",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "View the latest published full release for the repository. Draft releases and prereleases are not returned by this endpoint.",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#get-the-latest-release"
  },
  {
    "name": "Get a release by tag name",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/releases/tags/:tag",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "tag",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Get a published release with the specified tag.",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name"
  },
  {
    "name": "Create a release",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/releases",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "tag_name",
        "type": "string",
        "description": "The name of the tag.",
        "required": true,
        "location": "body"
      },
      {
        "name": "target_commitish",
        "type": "string",
        "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists.",
        "default": "the repository's default branch (usually `master`).",
        "required": false,
        "location": "body"
      },
      {
        "name": "name",
        "type": "string",
        "description": "The name of the release.",
        "required": false,
        "location": "body"
      },
      {
        "name": "body",
        "type": "string",
        "description": "Text describing the contents of the tag.",
        "required": false,
        "location": "body"
      },
      {
        "name": "draft",
        "type": "boolean",
        "description": "`true` to create a draft (unpublished) release, `false` to create a published one.",
        "default": false,
        "required": false,
        "location": "body"
      },
      {
        "name": "prerelease",
        "type": "boolean",
        "description": "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
        "default": false,
        "required": false,
        "location": "body"
      }
    ],
    "description": "Users with push access to the repository can create a release.",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#create-a-release"
  },
  {
    "name": "Edit a release",
    "enabledForApps": true,
    "method": "PATCH",
    "path": "/repos/:owner/:repo/releases/:release_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "release_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "tag_name",
        "type": "string",
        "description": "The name of the tag.",
        "required": false,
        "location": "body"
      },
      {
        "name": "target_commitish",
        "type": "string",
        "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists.",
        "default": "the repository's default branch (usually `master`).",
        "required": false,
        "location": "body"
      },
      {
        "name": "name",
        "type": "string",
        "description": "The name of the release.",
        "required": false,
        "location": "body"
      },
      {
        "name": "body",
        "type": "string",
        "description": "Text describing the contents of the tag.",
        "required": false,
        "location": "body"
      },
      {
        "name": "draft",
        "type": "boolean",
        "description": "`true` makes the release a draft, and `false` publishes the release.",
        "required": false,
        "location": "body"
      },
      {
        "name": "prerelease",
        "type": "boolean",
        "description": "`true` to identify the release as a prerelease, `false` to identify the release as a full release.",
        "required": false,
        "location": "body"
      }
    ],
    "description": "Users with push access to the repository can edit a release.",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#edit-a-release"
  },
  {
    "name": "Delete a release",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/releases/:release_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "release_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Users with push access to the repository can delete a release.",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#delete-a-release"
  },
  {
    "name": "List assets for a release",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/releases/:release_id/assets",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "release_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#list-assets-for-a-release"
  },
  {
    "name": "Upload a release asset",
    "enabledForApps": true,
    "method": "POST",
    "path": ":url",
    "params": [
      {
        "name": "url",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "Content-Length",
        "type": "integer",
        "description": "The content size of the asset in bytes",
        "required": true,
        "location": "headers"
      },
      {
        "name": "Content-Type",
        "type": "string",
        "description": "The content type of the asset. This should be set in the Header. Example: `\"application/zip\"`. For a list of acceptable types, refer this list of [media types](https://www.iana.org/assignments/media-types/media-types.xhtml).",
        "required": true,
        "location": "headers"
      },
      {
        "name": "name",
        "type": "string",
        "description": "The file name of the asset. This should be set in a URI query parameter.",
        "required": true,
        "location": "query"
      },
      {
        "name": "label",
        "type": "string",
        "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.",
        "required": false,
        "location": "query"
      }
    ],
    "description": "This endpoint makes use of [a Hypermedia relation](https://developer.github.com/v3/#hypermedia) to determine which URL to access. This endpoint is provided by a URI template in [the release's API response](#get-a-single-release). You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n\nThe asset data is expected in its raw binary form, rather than JSON. Everything else about the endpoint is the same as the rest of the API. For example, you'll still need to pass your authentication to be able to upload an asset.\n\nSend the raw binary content of the asset as the request body.\n\nThis may leave an empty asset with a state of `\"new\"`. It can be safely deleted.",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#upload-a-release-asset",
    "isOverride": true
  },
  {
    "name": "Get a single release asset",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/releases/assets/:asset_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "asset_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://developer.github.com/v3/media/#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#get-a-single-release-asset"
  },
  {
    "name": "Edit a release asset",
    "enabledForApps": true,
    "method": "PATCH",
    "path": "/repos/:owner/:repo/releases/assets/:asset_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "asset_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "name",
        "type": "string",
        "description": "The file name of the asset.",
        "required": false,
        "location": "body"
      },
      {
        "name": "label",
        "type": "string",
        "description": "An alternate short description of the asset. Used in place of the filename.",
        "required": false,
        "location": "body"
      }
    ],
    "description": "Users with push access to the repository can edit a release asset.",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#edit-a-release-asset"
  },
  {
    "name": "Delete a release asset",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/releases/assets/:asset_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "asset_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/releases/#delete-a-release-asset"
  },
  {
    "name": "Get contributors list with additions, deletions, and commit counts",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/stats/contributors",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "*   `total` \\- The Total number of commits authored by the contributor.\n\nWeekly Hash (`weeks` array):\n\n*   `w` \\- Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n*   `a` \\- Number of additions\n*   `d` \\- Number of deletions\n*   `c` \\- Number of commits\n\n",
    "documentationUrl": "https://developer.github.com/v3/repos/statistics/#get-contributors-list-with-additions-deletions-and-commit-counts"
  },
  {
    "name": "Get the last year of commit activity data",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/stats/commit_activity",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.\n\n",
    "documentationUrl": "https://developer.github.com/v3/repos/statistics/#get-the-last-year-of-commit-activity-data"
  },
  {
    "name": "Get the number of additions and deletions per week",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/stats/code_frequency",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Returns a weekly aggregate of the number of additions and deletions pushed to a repository.\n\n",
    "documentationUrl": "https://developer.github.com/v3/repos/statistics/#get-the-number-of-additions-and-deletions-per-week"
  },
  {
    "name": "Get the weekly commit count for the repository owner and everyone else",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/stats/participation",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n\nThe array order is oldest week (index 0) to most recent week.\n\n",
    "documentationUrl": "https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count-for-the-repository-owner-and-everyone-else"
  },
  {
    "name": "Get the number of commits per hour in each day",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/stats/punch_card",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Each array contains the day number, hour number, and number of commits:\n\n*   `0-6`: Sunday - Saturday\n*   `0-23`: Hour of day\n*   Number of commits\n\nFor example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.",
    "documentationUrl": "https://developer.github.com/v3/repos/statistics/#get-the-number-of-commits-per-hour-in-each-day"
  },
  {
    "name": "Create a status",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/statuses/:sha",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "sha",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "state",
        "type": "string",
        "description": "The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.",
        "required": true,
        "enum": [
          "error",
          "failure",
          "pending",
          "success"
        ],
        "location": "body"
      },
      {
        "name": "target_url",
        "type": "string",
        "description": "The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`",
        "required": false,
        "location": "body"
      },
      {
        "name": "description",
        "type": "string",
        "description": "A short description of the status.",
        "required": false,
        "location": "body"
      },
      {
        "name": "context",
        "type": "string",
        "description": "A string label to differentiate this status from the status of other systems.",
        "default": "default",
        "required": false,
        "location": "body"
      }
    ],
    "description": "Users with push access in a repository can create commit statuses for a given SHA.\n\nNote: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.",
    "documentationUrl": "https://developer.github.com/v3/repos/statuses/#create-a-status"
  },
  {
    "name": "List statuses for a specific ref",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/commits/:ref/statuses",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n\nThis resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.",
    "documentationUrl": "https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref"
  },
  {
    "name": "Get the combined status for a specific ref",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/commits/:ref/status",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\nThe most recent status for each context is returned, up to 100. This field [paginates](https://developer.github.com/v3/#pagination) if there are over 100 contexts.\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`",
    "documentationUrl": "https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref"
  },
  {
    "name": "List referrers",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/traffic/popular/referrers",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Get the top 10 referrers over the last 14 days.",
    "documentationUrl": "https://developer.github.com/v3/repos/traffic/#list-referrers"
  },
  {
    "name": "List paths",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/traffic/popular/paths",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Get the top 10 popular contents over the last 14 days.",
    "documentationUrl": "https://developer.github.com/v3/repos/traffic/#list-paths"
  },
  {
    "name": "Views",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/traffic/views",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per",
        "type": "string",
        "description": "Must be one of: `day`, `week`.",
        "default": "day",
        "required": false,
        "enum": [
          "day",
          "week"
        ],
        "location": "query"
      }
    ],
    "description": "Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
    "documentationUrl": "https://developer.github.com/v3/repos/traffic/#views"
  },
  {
    "name": "Clones",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/traffic/clones",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per",
        "type": "string",
        "description": "Must be one of: `day`, `week`.",
        "default": "day",
        "required": false,
        "enum": [
          "day",
          "week"
        ],
        "location": "query"
      }
    ],
    "description": "Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
    "documentationUrl": "https://developer.github.com/v3/repos/traffic/#clones"
  },
  {
    "name": "List hooks",
    "enabledForApps": false,
    "method": "GET",
    "path": "/repos/:owner/:repo/hooks",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/hooks/#list-hooks"
  },
  {
    "name": "Get single hook",
    "enabledForApps": false,
    "method": "GET",
    "path": "/repos/:owner/:repo/hooks/:hook_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "hook_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/hooks/#get-single-hook"
  },
  {
    "name": "Create a hook",
    "enabledForApps": false,
    "method": "POST",
    "path": "/repos/:owner/:repo/hooks",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "name",
        "type": "string",
        "description": "Use \"web\" for a webhook or use the name of a valid service. You can use [/hooks](https://api.github.com/hooks) for the list of valid service names. **Note**: GitHub Services will no longer be supported as of October 1, 2018. Please see the [blog post](/changes/2018-04-25-github-services-deprecation) for details.",
        "required": true,
        "location": "body"
      },
      {
        "name": "config",
        "type": "object",
        "description": "Key/value pairs to provide settings for this webhook. [These are defined below](#create-hook-config-params).",
        "required": true,
        "location": "body"
      },
      {
        "name": "config.url",
        "type": "string",
        "description": "The URL to which the payloads will be delivered.",
        "required": true,
        "location": "body"
      },
      {
        "name": "config.content_type",
        "type": "string",
        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
        "required": false,
        "location": "body"
      },
      {
        "name": "config.secret",
        "type": "string",
        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
        "required": false,
        "location": "body"
      },
      {
        "name": "config.insecure_ssl",
        "type": "string",
        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
        "required": false,
        "location": "body"
      },
      {
        "name": "events",
        "type": "string[]",
        "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
        "default": "[\"push\"]",
        "required": false,
        "location": "body"
      },
      {
        "name": "active",
        "type": "boolean",
        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
        "default": true,
        "required": false,
        "location": "body"
      }
    ],
    "description": "Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can share the same `config` as long as those webhooks do not have any `events` that overlap.\n\n**Note**: Repository service hooks (like email or Campfire) can have at most one configured at a time. Creating hooks for a service that already has one configured will [update the existing hook](#edit-a-hook).\n\n**Note**: GitHub Services will no longer be supported as of October 1, 2018. Please see the [blog post](/changes/2018-04-25-github-services-deprecation) for details. You can use the [Replacing GitHub Services guide](https://developer.github.com/v3/guides/replacing-github-services) to help you update your services to webhooks.\n\nHere's how you can create a hook that posts payloads in JSON format:",
    "documentationUrl": "https://developer.github.com/v3/repos/hooks/#create-a-hook"
  },
  {
    "name": "Edit a hook",
    "enabledForApps": false,
    "method": "PATCH",
    "path": "/repos/:owner/:repo/hooks/:hook_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "hook_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "config",
        "type": "object",
        "description": "Key/value pairs to provide settings for this webhook. [These are defined below](#create-hook-config-params).",
        "required": false,
        "location": "body"
      },
      {
        "name": "config.url",
        "type": "string",
        "description": "The URL to which the payloads will be delivered.",
        "required": true,
        "location": "body"
      },
      {
        "name": "config.content_type",
        "type": "string",
        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
        "required": false,
        "location": "body"
      },
      {
        "name": "config.secret",
        "type": "string",
        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
        "required": false,
        "location": "body"
      },
      {
        "name": "config.insecure_ssl",
        "type": "string",
        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
        "required": false,
        "location": "body"
      },
      {
        "name": "events",
        "type": "string[]",
        "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for. This replaces the entire array of events.",
        "default": "[\"push\"]",
        "required": false,
        "location": "body"
      },
      {
        "name": "add_events",
        "type": "string[]",
        "description": "Determines a list of events to be added to the list of events that the Hook triggers for.",
        "required": false,
        "location": "body"
      },
      {
        "name": "remove_events",
        "type": "string[]",
        "description": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
        "required": false,
        "location": "body"
      },
      {
        "name": "active",
        "type": "boolean",
        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
        "default": true,
        "required": false,
        "location": "body"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/hooks/#edit-a-hook"
  },
  {
    "name": "Test a push hook",
    "enabledForApps": false,
    "method": "POST",
    "path": "/repos/:owner/:repo/hooks/:hook_id/tests",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "hook_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n\n**Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`",
    "documentationUrl": "https://developer.github.com/v3/repos/hooks/#test-a-push-hook"
  },
  {
    "name": "Ping a hook",
    "enabledForApps": false,
    "method": "POST",
    "path": "/repos/:owner/:repo/hooks/:hook_id/pings",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "hook_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.",
    "documentationUrl": "https://developer.github.com/v3/repos/hooks/#ping-a-hook"
  },
  {
    "name": "Delete a hook",
    "enabledForApps": false,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/hooks/:hook_id",
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "hook_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/hooks/#delete-a-hook"
  }
]
