[
  {
    "name": "Get a Commit",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/git/commits/:sha",
    "params": [],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/git/commits/#get-a-commit"
  },
  {
    "name": "Create a Commit",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/git/commits",
    "params": [
      {
        "name": "message",
        "type": "string",
        "description": "The commit message",
        "required": true
      },
      {
        "name": "tree",
        "type": "string",
        "description": "The SHA of the tree object this commit points to",
        "required": true
      },
      {
        "name": "parents",
        "type": "array of strings",
        "description": "The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
        "required": true
      },
      {
        "name": "committer",
        "type": "object",
        "description": "object containing information about the committer."
      },
      {
        "name": "author",
        "type": "object",
        "description": "object containing information about the author."
      }
    ],
    "description": "The `committer` section is optional and will be filled with the `author` data if omitted. If the `author` section is omitted, it will be filled in with the authenticated user's information and the current date.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                                                                                             |\n| ----- | ------ | ----------------------------------------------------------------------------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit                                                                     |\n| email | string | The email of the author (or committer) of the commit                                                                    |\n| date  | string | Indicates when this commit was authored (or committed). This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. |\n\nYou can also provide an optional string `signature` parameter. This value will be added to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database.\n\n**Note**: To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.\n\nIn this example, the payload that the signature is over would have been:\n\n",
    "documentationUrl": "https://developer.github.com/v3/git/commits/#create-a-commit"
  },
  {
    "name": "Commit signature verification",
    "enabledForApps": false,
    "method": "GET",
    "path": "/repos/:owner/:repo/git/commits/:sha",
    "params": [
      {
        "name": "verified",
        "type": "boolean",
        "description": "Does GitHub consider the signature in this commit to be verified?",
        "required": false
      },
      {
        "name": "reason",
        "type": "string",
        "description": "The reason for `verified` value. Possible values and their meanings are enumerated in the table below.",
        "required": false
      },
      {
        "name": "signature",
        "type": "string",
        "description": "The signature that was extracted from the commit.",
        "required": false
      },
      {
        "name": "payload",
        "type": "string",
        "description": "The value that was signed.",
        "required": false
      }
    ],
    "description": "**The verification object**\n\n**The reason field**\n\nThe following are possible `reason`s that may be included in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature-verification service.                                                         |\n| `gpgverify_unavailable`  | The signature-verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
    "documentationUrl": "https://developer.github.com/v3/git/commits/#commit-signature-verification"
  }
]
