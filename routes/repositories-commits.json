[
  {
    "name": "List commits on a repository",
    "method": "GET",
    "path": "/repos/:owner/:repo/commits",
    "description": "",
    "params": [
      {
        "name": "sha",
        "type": "string",
        "description": "SHA or branch to start listing commits from.",
        "default": "the repositoryâ€™s default branch (usually `master`).",
        "required": false
      },
      {
        "name": "path",
        "type": "string",
        "description": "Only commits containing this file path will be returned.",
        "required": false
      },
      {
        "name": "author",
        "type": "string",
        "description": "GitHub login or email address by which to filter by commit author.",
        "required": false
      },
      {
        "name": "since",
        "type": "string",
        "description": "Only commits after this date will be returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "required": false
      },
      {
        "name": "until",
        "type": "string",
        "description": "Only commits before this date will be returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "required": false
      }
    ],
    "enabledForApps": true,
    "documentationUrl": "https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository"
  },
  {
    "name": "Get a single commit",
    "method": "GET",
    "path": "/repos/:owner/:repo/commits/:sha",
    "description": "Diffs with binary data will have no 'patch' property. Pass the appropriate [media type](/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
    "params": [],
    "enabledForApps": true,
    "documentationUrl": "https://developer.github.com/v3/repos/commits/#get-a-single-commit"
  },
  {
    "name": "Get the SHA-1 of a commit reference",
    "method": "GET",
    "path": "/repos/:owner/:repo/commits/:ref",
    "description": "Users with read access can get the SHA-1 of a commit reference:\n\nTo access the API you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n\n\nTo check if a remote reference's SHA-1 is the same as your local reference's SHA-1, make a `GET` request and provide the current SHA-1 for the local reference as the ETag.\n\nThe SHA-1 of the commit reference.\n\n",
    "params": [],
    "enabledForApps": true,
    "documentationUrl": "https://developer.github.com/v3/repos/commits/#get-the-sha-1-of-a-commit-reference"
  },
  {
    "name": "Compare two commits",
    "method": "GET",
    "path": "/repos/:owner/:repo/compare/:base...:head"
  },
  {
    "name": "Compare two commits",
    "method": "GET",
    "path": "/repos/:owner/:repo/compare/hubot:branchname...octocat:branchname"
  },
  {
    "name": "Commit signature verification",
    "method": "GET",
    "path": "/repos/:owner/:repo/commits/:sha",
    "description": "**The verification object**\n\nThe response will include a `verification` field whose value is an object describing the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n**The reason field**\n\nThe following are possible `reason`s that may be included in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature-verification service.                                                         |\n| `gpgverify_unavailable`  | The signature-verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
    "params": [
      {
        "name": "verified",
        "type": "boolean",
        "description": "Does GitHub consider the signature in this commit to be verified?",
        "required": false
      },
      {
        "name": "reason",
        "type": "string",
        "description": "The reason for `verified` value. Possible values and their meanings are enumerated in the table below.",
        "required": false
      },
      {
        "name": "signature",
        "type": "string",
        "description": "The signature that was extracted from the commit.",
        "required": false
      },
      {
        "name": "payload",
        "type": "string",
        "description": "The value that was signed.",
        "required": false
      }
    ],
    "enabledForApps": false,
    "documentationUrl": "https://developer.github.com/v3/repos/commits/#commit-signature-verification"
  }
]