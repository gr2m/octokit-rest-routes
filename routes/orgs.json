[
  {
    "name": "List your organizations",
    "enabledForApps": false,
    "method": "GET",
    "path": "/user/orgs",
    "params": [
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "List organizations for the authenticated user.\n\n**OAuth scope requirements**\n\nThis only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.",
    "idName": "list",
    "documentationUrl": "https://developer.github.com/v3/orgs/#list-your-organizations"
  },
  {
    "name": "List all organizations",
    "enabledForApps": true,
    "method": "GET",
    "path": "/organizations",
    "params": [
      {
        "name": "since",
        "type": "string",
        "description": "The integer ID of the last Organization that you've seen.",
        "required": false,
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Lists all organizations, in the order that they were created on GitHub.\n\n**Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of organizations.",
    "idName": "list",
    "documentationUrl": "https://developer.github.com/v3/orgs/#list-all-organizations"
  },
  {
    "name": "List user organizations",
    "enabledForApps": true,
    "method": "GET",
    "path": "/users/:username/orgs",
    "params": [
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List your organizations](#list-your-organizations) API instead.",
    "idName": "list-user",
    "documentationUrl": "https://developer.github.com/v3/orgs/#list-user-organizations"
  },
  {
    "name": "Get an organization",
    "enabledForApps": true,
    "method": "GET",
    "path": "/orgs/:org",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).",
    "idName": "get",
    "documentationUrl": "https://developer.github.com/v3/orgs/#get-an-organization"
  },
  {
    "name": "Edit an organization",
    "enabledForApps": false,
    "method": "PATCH",
    "path": "/orgs/:org",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "billing_email",
        "type": "string",
        "description": "Billing email address. This address is not publicized.",
        "required": false,
        "location": "body"
      },
      {
        "name": "company",
        "type": "string",
        "description": "The company name.",
        "required": false,
        "location": "body"
      },
      {
        "name": "email",
        "type": "string",
        "description": "The publicly visible email address.",
        "required": false,
        "location": "body"
      },
      {
        "name": "location",
        "type": "string",
        "description": "The location.",
        "required": false,
        "location": "body"
      },
      {
        "name": "name",
        "type": "string",
        "description": "The shorthand name of the company.",
        "required": false,
        "location": "body"
      },
      {
        "name": "description",
        "type": "string",
        "description": "The description of the company.",
        "required": false,
        "location": "body"
      },
      {
        "name": "has_organization_projects",
        "type": "boolean",
        "description": "Toggles whether organization projects are enabled for the organization.",
        "required": false,
        "location": "body"
      },
      {
        "name": "has_repository_projects",
        "type": "boolean",
        "description": "Toggles whether repository projects are enabled for repositories that belong to the organization.",
        "required": false,
        "location": "body"
      },
      {
        "name": "default_repository_permission",
        "type": "string",
        "description": "Default permission level members have for organization repositories:  \n\\* `read` \\- can pull, but not push to or administer this repository.  \n\\* `write` \\- can pull and push, but not administer this repository.  \n\\* `admin` \\- can pull, push, and administer this repository.  \n\\* `none` \\- no permissions granted by default.",
        "default": "read",
        "required": false,
        "enum": [
          "read",
          "write",
          "admin",
          "none"
        ],
        "location": "body"
      },
      {
        "name": "members_can_create_repositories",
        "type": "boolean",
        "description": "Toggles ability of non-admin organization members to create repositories  \n\\* `true` \\- all organization members can create repositories.  \n\\* `false` \\- only admin members can create repositories.",
        "default": true,
        "required": false,
        "location": "body"
      }
    ],
    "description": "",
    "idName": "edit",
    "documentationUrl": "https://developer.github.com/v3/orgs/#edit-an-organization"
  },
  {
    "name": "List blocked users",
    "enabledForApps": false,
    "method": "GET",
    "path": "/orgs/:org/blocks",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "List the users blocked by an organization.",
    "idName": "list-blocked-users",
    "documentationUrl": "https://developer.github.com/v3/orgs/blocking/#list-blocked-users"
  },
  {
    "name": "Check whether a user is blocked from an organization",
    "enabledForApps": false,
    "method": "GET",
    "path": "/orgs/:org/blocks/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "If the user is blocked:\n\nIf the user is not blocked:",
    "idName": "check-whether-user-is-blocked",
    "documentationUrl": "https://developer.github.com/v3/orgs/blocking/#check-whether-a-user-is-blocked-from-an-organization"
  },
  {
    "name": "Block a user",
    "enabledForApps": false,
    "method": "PUT",
    "path": "/orgs/:org/blocks/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "idName": "block-user",
    "documentationUrl": "https://developer.github.com/v3/orgs/blocking/#block-a-user"
  },
  {
    "name": "Unblock a user",
    "enabledForApps": false,
    "method": "DELETE",
    "path": "/orgs/:org/blocks/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "idName": "unblock-user",
    "documentationUrl": "https://developer.github.com/v3/orgs/blocking/#unblock-a-user"
  },
  {
    "name": "Members list",
    "enabledForApps": true,
    "method": "GET",
    "path": "/orgs/:org/members",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "filter",
        "type": "string",
        "description": "Filter members returned in the list. Can be one of:  \n\\* `2fa_disabled` \\- Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.  \n\\* `all` \\- All members the authenticated user can see.",
        "default": "all",
        "required": false,
        "enum": [
          "2fa_disabled",
          "all"
        ],
        "location": "query"
      },
      {
        "name": "role",
        "type": "string",
        "description": "Filter members returned by their role. Can be one of:  \n\\* `all` \\- All members of the organization, regardless of role.  \n\\* `admin` \\- Organization owners.  \n\\* `member` \\- Non-owner organization members.",
        "default": "all",
        "required": false,
        "enum": [
          "all",
          "admin",
          "member"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.\n\n",
    "idName": "members-list",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#members-list"
  },
  {
    "name": "Check membership",
    "enabledForApps": true,
    "method": "GET",
    "path": "/orgs/:org/members/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Check if a user is, publicly or privately, a member of the organization.",
    "idName": "check-membership",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#check-membership"
  },
  {
    "name": "Remove a member",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/orgs/:org/members/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.",
    "idName": "remove-member",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#remove-a-member"
  },
  {
    "name": "Public members list",
    "enabledForApps": true,
    "method": "GET",
    "path": "/orgs/:org/public_members",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Members of an organization can choose to have their membership publicized or not.",
    "idName": "public-members-list",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#public-members-list"
  },
  {
    "name": "Check public membership",
    "enabledForApps": true,
    "method": "GET",
    "path": "/orgs/:org/public_members/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "idName": "check-public-membership",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#check-public-membership"
  },
  {
    "name": "Publicize a user's membership",
    "enabledForApps": false,
    "method": "PUT",
    "path": "/orgs/:org/public_members/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
    "idName": "publicize-membership",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#publicize-a-users-membership"
  },
  {
    "name": "Conceal a user's membership",
    "enabledForApps": false,
    "method": "DELETE",
    "path": "/orgs/:org/public_members/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "idName": "conceal-membership",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#conceal-a-users-membership"
  },
  {
    "name": "Get organization membership",
    "enabledForApps": true,
    "method": "GET",
    "path": "/orgs/:org/memberships/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "In order to get a user's membership with an organization, the authenticated user must be an organization member.",
    "idName": "get-membership",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#get-organization-membership"
  },
  {
    "name": "Add or update organization membership",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/orgs/:org/memberships/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "role",
        "type": "string",
        "description": "The role to give the user in the organization. Can be one of:  \n\\* `admin` \\- The user will become an owner of the organization.  \n\\* `member` \\- The user will become a non-owner member of the organization.",
        "default": "member",
        "required": false,
        "enum": [
          "admin",
          "member"
        ],
        "location": "body"
      }
    ],
    "description": "Only authenticated organization owners can add a member to the organization or update the member's role.\n\n*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](#get-organization-membership) will be `pending` until they accept the invitation.\n    \n*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n\n**Rate limits**\n\nTo prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.",
    "idName": "add-or-update-membership",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership"
  },
  {
    "name": "Remove organization membership",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/orgs/:org/memberships/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n\nIf the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.",
    "idName": "remove-membership",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#remove-organization-membership"
  },
  {
    "name": "List organization invitation teams",
    "enabledForApps": false,
    "method": "GET",
    "path": "/orgs/:org/invitations/:invitation_id/teams",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "invitation_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.",
    "idName": "list-invitation-teams",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams"
  },
  {
    "name": "List pending organization invitations",
    "enabledForApps": true,
    "method": "GET",
    "path": "/orgs/:org/invitations",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.",
    "idName": "list-pending-invitations",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations"
  },
  {
    "name": "Create organization invitation",
    "enabledForApps": false,
    "method": "POST",
    "path": "/orgs/:org/invitations",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "invitee_id",
        "type": "integer",
        "description": "**Required unless you provide `email`**. GitHub user ID for the person you are inviting.",
        "required": false,
        "location": "body"
      },
      {
        "name": "email",
        "type": "string",
        "description": "**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.",
        "required": false,
        "location": "body"
      },
      {
        "name": "role",
        "type": "string",
        "description": "Specify role for new member. Can be one of:  \n\\* `admin` \\- Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n\\* `direct_member` \\- Non-owner organization members with ability to see other members and join teams by invitation.  \n\\* `billing_manager` \\- Non-owner organization members with ability to manage the billing settings of your organization.",
        "default": "direct_member",
        "required": false,
        "enum": [
          "admin",
          "direct_member",
          "billing_manager"
        ],
        "location": "body"
      },
      {
        "name": "team_ids",
        "type": "integer[]",
        "description": "Specify IDs for the teams you want to invite new members to.",
        "required": false,
        "location": "body"
      }
    ],
    "description": "Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.",
    "idName": "create-invitation",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#create-organization-invitation"
  },
  {
    "name": "List your organization memberships",
    "enabledForApps": false,
    "method": "GET",
    "path": "/user/memberships/orgs",
    "params": [
      {
        "name": "state",
        "type": "string",
        "description": "Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.",
        "required": false,
        "enum": [
          "active",
          "pending"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "idName": "list-memberships",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#list-your-organization-memberships"
  },
  {
    "name": "Get your organization membership",
    "enabledForApps": false,
    "method": "GET",
    "path": "/user/memberships/orgs/:org",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "idName": "get-membership",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#get-your-organization-membership"
  },
  {
    "name": "Edit your organization membership",
    "enabledForApps": false,
    "method": "PATCH",
    "path": "/user/memberships/orgs/:org",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "state",
        "type": "string",
        "description": "The state that the membership should be in. Only `\"active\"` will be accepted.",
        "required": true,
        "enum": [
          "active"
        ],
        "location": "body"
      }
    ],
    "description": "",
    "idName": "edit-membership",
    "documentationUrl": "https://developer.github.com/v3/orgs/members/#edit-your-organization-membership"
  },
  {
    "name": "List outside collaborators",
    "enabledForApps": true,
    "method": "GET",
    "path": "/orgs/:org/outside_collaborators",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "filter",
        "type": "string",
        "description": "Filter the list of outside collaborators. Can be one of:  \n\\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.  \n\\* `all`: All outside collaborators.",
        "default": "all",
        "required": false,
        "enum": [
          "2fa_disabled",
          "all"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "List all users who are outside collaborators of an organization.\n\n",
    "idName": "list-outside-collaborators",
    "documentationUrl": "https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators"
  },
  {
    "name": "Remove outside collaborator",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/orgs/:org/outside_collaborators/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Removing a user from this list will remove them from all the organization's repositories.",
    "idName": "remove-outside-collaborator",
    "documentationUrl": "https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator"
  },
  {
    "name": "Convert member to outside collaborator",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/orgs/:org/outside_collaborators/:username",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "username",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\".",
    "idName": "convert-member-to-outside-collaborator",
    "documentationUrl": "https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator"
  },
  {
    "name": "List hooks",
    "enabledForApps": false,
    "method": "GET",
    "path": "/orgs/:org/hooks",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "",
    "idName": "list-hooks",
    "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#list-hooks"
  },
  {
    "name": "Get single hook",
    "enabledForApps": false,
    "method": "GET",
    "path": "/orgs/:org/hooks/:hook_id",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "hook_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "idName": "get-hook",
    "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#get-single-hook"
  },
  {
    "name": "Create a hook",
    "enabledForApps": false,
    "method": "POST",
    "path": "/orgs/:org/hooks",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "name",
        "type": "string",
        "description": "Must be passed as \"web\".",
        "required": true,
        "location": "body"
      },
      {
        "name": "config",
        "type": "object",
        "description": "Key/value pairs to provide settings for this webhook. [These are defined below](#create-hook-config-params).",
        "required": true,
        "location": "body"
      },
      {
        "name": "config.url",
        "type": "string",
        "description": "The URL to which the payloads will be delivered.",
        "required": true,
        "location": "body"
      },
      {
        "name": "config.content_type",
        "type": "string",
        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
        "required": false,
        "location": "body"
      },
      {
        "name": "config.secret",
        "type": "string",
        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
        "required": false,
        "location": "body"
      },
      {
        "name": "config.insecure_ssl",
        "type": "string",
        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
        "required": false,
        "location": "body"
      },
      {
        "name": "events",
        "type": "string[]",
        "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
        "default": "[\"push\"]",
        "required": false,
        "location": "body"
      },
      {
        "name": "active",
        "type": "boolean",
        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
        "default": true,
        "required": false,
        "location": "body"
      }
    ],
    "description": "Here's how you can create a hook that posts payloads in JSON format:",
    "idName": "create-hook",
    "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#create-a-hook"
  },
  {
    "name": "Edit a hook",
    "enabledForApps": false,
    "method": "PATCH",
    "path": "/orgs/:org/hooks/:hook_id",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "hook_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "config",
        "type": "object",
        "description": "Key/value pairs to provide settings for this webhook. [These are defined below](#update-hook-config-params).",
        "required": false,
        "location": "body"
      },
      {
        "name": "config.url",
        "type": "string",
        "description": "The URL to which the payloads will be delivered.",
        "required": true,
        "location": "body"
      },
      {
        "name": "config.content_type",
        "type": "string",
        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
        "required": false,
        "location": "body"
      },
      {
        "name": "config.secret",
        "type": "string",
        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
        "required": false,
        "location": "body"
      },
      {
        "name": "config.insecure_ssl",
        "type": "string",
        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
        "required": false,
        "location": "body"
      },
      {
        "name": "events",
        "type": "string[]",
        "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
        "default": "[\"push\"]",
        "required": false,
        "location": "body"
      },
      {
        "name": "active",
        "type": "boolean",
        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
        "default": true,
        "required": false,
        "location": "body"
      }
    ],
    "description": "",
    "idName": "edit-hook",
    "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#edit-a-hook"
  },
  {
    "name": "Ping a hook",
    "enabledForApps": false,
    "method": "POST",
    "path": "/orgs/:org/hooks/:hook_id/pings",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "hook_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.",
    "idName": "ping-hook",
    "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#ping-a-hook"
  },
  {
    "name": "Delete a hook",
    "enabledForApps": false,
    "method": "DELETE",
    "path": "/orgs/:org/hooks/:hook_id",
    "params": [
      {
        "name": "org",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "hook_id",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "idName": "delete-hook",
    "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#delete-a-hook"
  }
]
