{
  "name": "List issues for a repository",
  "enabledForApps": true,
  "method": "GET",
  "path": "/repos/:owner/:repo/issues",
  "params": [
    {
      "name": "owner",
      "type": "string",
      "required": true,
      "description": "",
      "location": "url"
    },
    {
      "name": "repo",
      "type": "string",
      "required": true,
      "description": "",
      "location": "url"
    },
    {
      "name": "milestone",
      "type": "string",
      "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.",
      "required": false,
      "location": "query"
    },
    {
      "name": "state",
      "type": "string",
      "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
      "default": "open",
      "required": false,
      "enum": [
        "open",
        "closed",
        "all"
      ],
      "location": "query"
    },
    {
      "name": "assignee",
      "type": "string",
      "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.",
      "required": false,
      "location": "query"
    },
    {
      "name": "creator",
      "type": "string",
      "description": "The user that created the issue.",
      "required": false,
      "location": "query"
    },
    {
      "name": "mentioned",
      "type": "string",
      "description": "A user that's mentioned in the issue.",
      "required": false,
      "location": "query"
    },
    {
      "name": "labels",
      "type": "string",
      "description": "A list of comma separated label names. Example: `bug,ui,@high`",
      "required": false,
      "location": "query"
    },
    {
      "name": "sort",
      "type": "string",
      "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
      "default": "created",
      "required": false,
      "enum": [
        "created",
        "updated",
        "comments"
      ],
      "location": "query"
    },
    {
      "name": "direction",
      "type": "string",
      "description": "The direction of the sort. Can be either `asc` or `desc`.",
      "default": "desc",
      "required": false,
      "enum": [
        "asc",
        "desc"
      ],
      "location": "query"
    },
    {
      "name": "since",
      "type": "string",
      "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
      "required": false,
      "location": "query"
    },
    {
      "name": "per_page",
      "type": "integer",
      "required": false,
      "description": "Results per page (max 100)",
      "default": 30,
      "location": "query"
    },
    {
      "name": "page",
      "type": "integer",
      "required": false,
      "description": "Page number of the results to fetch.",
      "default": 1,
      "location": "query"
    }
  ],
  "description": "**Note**: In the past, pull requests and issues were more closely aligned than they are now. As far as the API is concerned, every pull request is an issue, but not every issue is a pull request.\n\nThis endpoint may also return pull requests in the response. If an issue _is_ a pull request, the object will include a `pull_request` key.\n\n\n\n**Note:** If a user opened an issue via a GitHub App, the `performed_via_github_app` key contains information on that GitHub App.",
  "idName": "list-for-repo",
  "documentationUrl": "https://developer.github.com/v3/issues/#list-issues-for-a-repository"
}
