[
  {
    "name": "Get the README",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/readme",
    "params": [
      {
        "name": "ref",
        "type": "string",
        "description": "The name of the commit/branch/tag.",
        "default": "the repository’s default branch (usually `master`)",
        "required": false
      }
    ],
    "description": "This method returns the preferred README for a repository.\n\nREADMEs support [custom media types](#custom-media-types) for retrieving the raw content or rendered HTML.",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#get-the-readme"
  },
  {
    "name": "Get contents",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/contents/:path",
    "params": [
      {
        "name": "path",
        "type": "string",
        "description": "The content path.",
        "required": false
      },
      {
        "name": "ref",
        "type": "string",
        "description": "The name of the commit/branch/tag.",
        "default": "the repository’s default branch (usually `master`)",
        "required": false
      }
    ],
    "description": "This method returns the contents of a file or directory in a repository.\n\nFiles and symlinks support [a custom media type](#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](#custom-media-types) to ensure the content is returned in a consistent object format.\n\n**Note**:\n\n*   To get a repository's contents recursively, you can [recursively get the tree](/v3/git/trees/).\n*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](/v3/git/trees/#get-a-tree).\n*   This API supports files up to 1 megabyte in size.\n\nThe response will be an array of objects, one object for each item in the directory.\n\nWhen listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value _should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \"submodule\".\n\nIf the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the API responds with the content of the file (in the [format shown above](#response-if-content-is-a-file)).\n\nOtherwise, the API responds with an object describing the symlink itself:\n\nThe `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit.\n\nIf the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the github.com URLs (`html_url` and `_links[\"html\"]`) will have null values.",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#get-contents"
  },
  {
    "name": "Create a file",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/repos/:owner/:repo/contents/:path",
    "params": [
      {
        "name": "path",
        "type": "string",
        "description": "The content path.",
        "required": true
      },
      {
        "name": "message",
        "type": "string",
        "description": "The commit message.",
        "required": true
      },
      {
        "name": "content",
        "type": "string",
        "description": "The new file content, Base64 encoded.",
        "required": true
      },
      {
        "name": "branch",
        "type": "string",
        "description": "The branch name.",
        "default": "the repository’s default branch (usually `master`)",
        "required": false
      },
      {
        "name": "committer",
        "type": "object",
        "description": "object containing information about the committer."
      },
      {
        "name": "author",
        "type": "object",
        "description": "object containing information about the author."
      }
    ],
    "description": "This method creates a new file in a repository\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                          |\n| ----- | ------ | ---------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit  |\n| email | string | The email of the author (or committer) of the commit |",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#create-a-file"
  },
  {
    "name": "Update a file",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/repos/:owner/:repo/contents/:path",
    "params": [
      {
        "name": "path",
        "type": "string",
        "description": "The content path.",
        "required": true
      },
      {
        "name": "message",
        "type": "string",
        "description": "The commit message.",
        "required": true
      },
      {
        "name": "content",
        "type": "string",
        "description": "The updated file content, Base64 encoded.",
        "required": true
      },
      {
        "name": "sha",
        "type": "string",
        "description": "The blob SHA of the file being replaced.",
        "required": true
      },
      {
        "name": "branch",
        "type": "string",
        "description": "The branch name.",
        "default": "the repository’s default branch (usually `master`)",
        "required": false
      },
      {
        "name": "committer",
        "type": "object",
        "description": "object containing information about the committer."
      },
      {
        "name": "author",
        "type": "object",
        "description": "object containing information about the author."
      }
    ],
    "description": "This method updates a file in a repository\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                          |\n| ----- | ------ | ---------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit  |\n| email | string | The email of the author (or committer) of the commit |",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#update-a-file"
  },
  {
    "name": "Delete a file",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/contents/:path",
    "params": [
      {
        "name": "path",
        "type": "string",
        "description": "The content path.",
        "required": true
      },
      {
        "name": "message",
        "type": "string",
        "description": "The commit message.",
        "required": true
      },
      {
        "name": "sha",
        "type": "string",
        "description": "The blob SHA of the file being replaced.",
        "required": true
      },
      {
        "name": "branch",
        "type": "string",
        "description": "The branch name.",
        "default": "the repository’s default branch (usually `master`)",
        "required": false
      },
      {
        "name": "committer",
        "type": "object",
        "description": "object containing information about the committer."
      },
      {
        "name": "author",
        "type": "object",
        "description": "object containing information about the author."
      }
    ],
    "description": "This method deletes a file in a repository\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                          |\n| ----- | ------ | ---------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit  |\n| email | string | The email of the author (or committer) of the commit |",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#delete-a-file"
  },
  {
    "name": "Get archive link",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/:archive_format/:ref",
    "params": [
      {
        "name": "archive_format",
        "type": "string",
        "description": "Can be either `tarball` or `zipball`.",
        "default": "tarball",
        "required": false
      },
      {
        "name": "ref",
        "type": "string",
        "description": "A valid Git reference.",
        "default": "the repository’s default branch (usually `master`)",
        "required": false
      }
    ],
    "description": "This method will return a `302` to a URL to download a tarball or zipball archive for a repository. Please make sure your HTTP framework is configured to follow redirects or you will need to use the `Location` header to make a second `GET` request.\n\n_Note_: For private repositories, these links are temporary and expire after five minutes.\n\nTo follow redirects with curl, use the `-L` switch:\n\n",
    "documentationUrl": "https://developer.github.com/v3/repos/contents/#get-archive-link"
  }
]