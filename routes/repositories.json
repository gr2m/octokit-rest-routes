[
  {
    "name": "List your repositories",
    "enabledForApps": false,
    "method": "GET",
    "path": "/user/repos",
    "params": [
      {
        "name": "visibility",
        "type": "enum",
        "options": [
          "all",
          "public",
          "private"
        ],
        "description": "Can be one of `all`, `public`, or `private`.",
        "default": "all",
        "required": false
      },
      {
        "name": "affiliation",
        "type": "string",
        "description": "Comma-separated list of values. Can include:  \n\\* `owner`: Repositories that are owned by the authenticated user.  \n\\* `collaborator`: Repositories that the user has been added to as a collaborator.  \n\\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.",
        "default": "owner,collaborator,organization_member",
        "required": false
      },
      {
        "name": "type",
        "type": "enum",
        "options": [
          "all",
          "owner",
          "public",
          "private",
          "member",
          "422"
        ],
        "description": "Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`  \n  \nWill cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.",
        "default": "all",
        "required": false
      },
      {
        "name": "sort",
        "type": "enum",
        "options": [
          "created",
          "updated",
          "pushed",
          "full_name"
        ],
        "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
        "default": "full_name",
        "required": false
      },
      {
        "name": "direction",
        "type": "enum",
        "options": [
          "asc",
          "desc"
        ],
        "description": "Can be one of `asc` or `desc`.",
        "default": "when using `full_name`: `asc`; otherwise `desc`",
        "required": false
      }
    ],
    "description": "List repositories that are accessible to the authenticated user.\n\nThis includes repositories owned by the authenticated user, repositories where the authenticated user is a collaborator, and repositories that the authenticated user has access to through an organization membership.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-your-repositories"
  },
  {
    "name": "List user repositories",
    "enabledForApps": true,
    "method": "GET",
    "path": "/users/:username/repos",
    "params": [
      {
        "name": "type",
        "type": "enum",
        "options": [
          "all",
          "owner",
          "member"
        ],
        "description": "Can be one of `all`, `owner`, `member`.",
        "default": "owner",
        "required": false
      },
      {
        "name": "sort",
        "type": "enum",
        "options": [
          "created",
          "updated",
          "pushed",
          "full_name"
        ],
        "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
        "default": "full_name",
        "required": false
      },
      {
        "name": "direction",
        "type": "enum",
        "options": [
          "asc",
          "desc"
        ],
        "description": "Can be one of `asc` or `desc`.",
        "default": "when using `full_name`: `asc`, otherwise `desc`",
        "required": false
      }
    ],
    "description": "List public repositories for the specified user.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-user-repositories"
  },
  {
    "name": "List organization repositories",
    "enabledForApps": false,
    "method": "GET",
    "path": "/orgs/:org/repos",
    "params": [
      {
        "name": "type",
        "type": "enum",
        "options": [
          "all",
          "public",
          "private",
          "forks",
          "sources",
          "member"
        ],
        "description": "Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`.",
        "default": "all",
        "required": false
      }
    ],
    "description": "List repositories for the specified org.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-organization-repositories"
  },
  {
    "name": "List all public repositories",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repositories",
    "params": [
      {
        "name": "since",
        "type": "string",
        "description": "The integer ID of the last Repository that you've seen.",
        "required": false
      }
    ],
    "description": "This provides a dump of every public repository, in the order that they were created.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](/v3/#link-header) to get the URL for the next page of repositories.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-all-public-repositories"
  },
  {
    "name": "Create",
    "enabledForApps": true,
    "params": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the repository.",
        "required": true
      },
      {
        "name": "description",
        "type": "string",
        "description": "A short description of the repository.",
        "required": false
      },
      {
        "name": "homepage",
        "type": "string",
        "description": "A URL with more information about the repository.",
        "required": false
      },
      {
        "name": "private",
        "type": "enum",
        "options": [
          "true",
          "false"
        ],
        "description": "Either `true` to create a private repository or `false` to create a public one. Creating private repositories requires a paid GitHub account.",
        "default": "false",
        "required": false
      },
      {
        "name": "has_issues",
        "type": "enum",
        "options": [
          "true",
          "false"
        ],
        "description": "Either `true` to enable issues for this repository or `false` to disable them.",
        "default": "true",
        "required": false
      },
      {
        "name": "has_projects",
        "type": "enum",
        "options": [
          "true",
          "false",
          "false",
          "true"
        ],
        "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
        "default": "true",
        "required": false
      },
      {
        "name": "has_wiki",
        "type": "enum",
        "options": [
          "true",
          "false"
        ],
        "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
        "default": "true",
        "required": false
      },
      {
        "name": "team_id",
        "type": "integer",
        "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
        "required": false
      },
      {
        "name": "auto_init",
        "type": "boolean",
        "description": "Pass `true` to create an initial commit with empty README.",
        "default": false,
        "required": false
      },
      {
        "name": "gitignore_template",
        "type": "string",
        "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
        "required": false
      },
      {
        "name": "license_template",
        "type": "string",
        "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
        "required": false
      },
      {
        "name": "allow_squash_merge",
        "type": "enum",
        "options": [
          "true",
          "false"
        ],
        "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
        "default": "true",
        "required": false
      },
      {
        "name": "allow_merge_commit",
        "type": "enum",
        "options": [
          "true",
          "false"
        ],
        "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
        "default": "true",
        "required": false
      },
      {
        "name": "allow_rebase_merge",
        "type": "enum",
        "options": [
          "true",
          "false"
        ],
        "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
        "default": "true",
        "required": false
      }
    ],
    "description": "Create a new repository for the authenticated user.\n\n**Note**: There are two endpoints for creating a repository: one to create a repository on a user account, and one to create a repository in an organization. The organization endpoint is fully enabled for [GitHub Apps](/v3/apps/available-endpoints/), whereas the user endpoint is enabled only for [user-to-server requests](/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#user-to-server-requests).\n\nCreate a new repository in this organization. The authenticated user must be a member of the specified organization.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository\n*   `repo` scope to create a private repository",
    "documentationUrl": "https://developer.github.com/v3/repos/#create"
  },
  {
    "name": "Get",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo",
    "params": [],
    "description": "The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.",
    "documentationUrl": "https://developer.github.com/v3/repos/#get"
  },
  {
    "name": "Edit",
    "enabledForApps": true,
    "method": "PATCH",
    "path": "/repos/:owner/:repo",
    "params": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the repository.",
        "required": true
      },
      {
        "name": "description",
        "type": "string",
        "description": "A short description of the repository.",
        "required": false
      },
      {
        "name": "homepage",
        "type": "string",
        "description": "A URL with more information about the repository.",
        "required": false
      },
      {
        "name": "private",
        "type": "enum",
        "options": [
          "true",
          "false",
          "false",
          "422",
          "422"
        ],
        "description": "Either `true` to make the repository private or `false` to make it public. Creating private repositories requires a paid GitHub account. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
        "default": "false",
        "required": false
      },
      {
        "name": "has_issues",
        "type": "enum",
        "options": [
          "true",
          "false"
        ],
        "description": "Either `true` to enable issues for this repository or `false` to disable them.",
        "default": "true",
        "required": false
      },
      {
        "name": "has_projects",
        "type": "enum",
        "options": [
          "true",
          "false",
          "false",
          "true"
        ],
        "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
        "default": "true",
        "required": false
      },
      {
        "name": "has_wiki",
        "type": "enum",
        "options": [
          "true",
          "false"
        ],
        "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
        "default": "true",
        "required": false
      },
      {
        "name": "default_branch",
        "type": "string",
        "description": "Updates the default branch for this repository.",
        "required": false
      },
      {
        "name": "allow_squash_merge",
        "type": "enum",
        "options": [
          "true",
          "false"
        ],
        "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
        "default": "true",
        "required": false
      },
      {
        "name": "allow_merge_commit",
        "type": "enum",
        "options": [
          "true",
          "false"
        ],
        "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
        "default": "true",
        "required": false
      },
      {
        "name": "allow_rebase_merge",
        "type": "enum",
        "options": [
          "true",
          "false"
        ],
        "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
        "default": "true",
        "required": false
      },
      {
        "name": "archived",
        "type": "boolean",
        "description": "`true` to archive this repository. **Note**: You cannot unarchive repositories through the API.",
        "default": false,
        "required": false
      }
    ],
    "description": "**Note**: To edit a repository's topics, use the [`topics` endpoint](#replace-all-topics-for-a-repository).",
    "documentationUrl": "https://developer.github.com/v3/repos/#edit"
  },
  {
    "name": "List all topics for a repository",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/topics",
    "params": [],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-all-topics-for-a-repository"
  },
  {
    "name": "Replace all topics for a repository",
    "enabledForApps": true,
    "method": "PUT",
    "path": "/repos/:owner/:repo/topics",
    "params": [
      {
        "name": "names",
        "type": "array of strings",
        "description": "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository.",
        "required": true
      }
    ],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/#replace-all-topics-for-a-repository"
  },
  {
    "name": "List contributors",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/contributors",
    "params": [
      {
        "name": "anon",
        "type": "string",
        "description": "Set to `1` or `true` to include anonymous contributors in results.",
        "required": false
      }
    ],
    "description": "Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.\n\nGitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-contributors"
  },
  {
    "name": "List languages",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/languages",
    "params": [],
    "description": "Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-languages"
  },
  {
    "name": "List teams",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/teams",
    "params": [],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-teams"
  },
  {
    "name": "List tags",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/tags",
    "params": [],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/repos/#list-tags"
  },
  {
    "name": "Delete a repository",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo",
    "params": [],
    "description": "Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.\n\nIf an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:",
    "documentationUrl": "https://developer.github.com/v3/repos/#delete-a-repository"
  },
  {
    "name": "Transfer a repository",
    "enabledForApps": false,
    "method": "POST",
    "path": "/repos/:owner/:repo/transfer",
    "params": [
      {
        "name": "new_owner",
        "type": "string",
        "description": "**Required:** The username or organization name the repository will be transferred to.",
        "required": false
      },
      {
        "name": "team_id",
        "type": "array of integers",
        "description": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
        "required": false
      }
    ],
    "description": "A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).",
    "documentationUrl": "https://developer.github.com/v3/repos/#transfer-a-repository"
  }
]
