{
  "name": "Search topics",
  "enabledForApps": true,
  "method": "GET",
  "path": "/search/topics",
  "params": [
    {
      "name": "q",
      "type": "string",
      "description": "The search terms.",
      "required": true,
      "location": "query"
    }
  ],
  "description": "Find topics via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nResults are sorted by best match by default.\n\nThe `q` search term can also contain any combination of the supported topic search qualifiers as described by the in-browser [topic search documentation](https://help.github.com/articles/searching-topics/) and [search syntax documentation](https://help.github.com/articles/search-syntax/):\n\n*   `is:curated` Finds topics that have extra information, e.g., a description, display name, or logo, because they have an entry in the [`github/explore` repository](https://github.com/github/explore).\n*   `is:featured` Finds topics listed on [https://github.com/topics](https://github.com/topics). Any featured topic will also be curated.\n*   `is:not-featured` Finds topics not listed on [https://github.com/topics](https://github.com/topics).\n*   `is:not-curated` Finds topics that have no extra information because they haven't been added to the [`github/explore` repository](https://github.com/github/explore).\n*   `repositories:` Finds topics with some number of repositories using them, e.g., `repositories:>1000`.\n\nSuppose you want to search for topics related to Ruby that are featured on [https://github.com/topics](https://github.com/topics). Your query might look like this:\n\nIn this request, we're searching for topics with the keyword `ruby`, and we're limiting the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.\n\n**Note:** A search for featured Ruby topics only has 6 total results, so a [Link header](https://developer.github.com/v3/#link-header) indicating pagination is not included in the response.\n\n**Highlighting topic search results**\n\nYou might want to highlight the matching search terms when displaying search results. The API offers additional metadata to support this use case. To get this metadata in your search results, specify the `text-match` media type in your Accept header. For example, via cURL, the above query would look like this:\n\nThis produces the same JSON payload as above, with an extra key called `text_matches`, which is an array of objects. These objects provide information such as the position of your search terms within the text, as well as the `property` that included the search term.\n\nWhen searching for topics, you can get text match metadata for the topic's **short_description**, **description**, **name**, or **display_name** field. For details on the attributes present in the `text_matches` array, see [text match metadata](#text-match-metadata).",
  "idName": "topics",
  "documentationUrl": "https://developer.github.com/v3/search/#search-topics"
}
