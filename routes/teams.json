[
  {
    "name": "List teams",
    "enabledForApps": true,
    "method": "GET",
    "path": "/orgs/:org/teams",
    "params": [],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/teams/#list-teams"
  },
  {
    "name": "Get team",
    "enabledForApps": true,
    "method": "GET",
    "path": "/teams/:id",
    "params": [],
    "description": "",
    "documentationUrl": "https://developer.github.com/v3/teams/#get-team"
  },
  {
    "name": "Create team",
    "enabledForApps": false,
    "method": "POST",
    "path": "/orgs/:org/teams",
    "params": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the team.",
        "required": true
      },
      {
        "name": "description",
        "type": "string",
        "description": "The description of the team.",
        "required": false
      },
      {
        "name": "maintainers",
        "type": "array of strings",
        "description": "The logins of organization members to add as maintainers of the team.",
        "required": false
      },
      {
        "name": "repo_names",
        "type": "array of strings",
        "description": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
        "required": false
      },
      {
        "name": "privacy",
        "type": "string",
        "description": "The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n\\* `secret` \\- only visible to organization owners and members of this team.  \n\\* `closed` \\- visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n\\* `closed` \\- visible to all members of this organization.  \nDefault for child team: `closed`  \n**Note**: You must pass the `hellcat-preview` media type to set privacy default to `closed` for child teams. **For a parent or child team:**  ",
        "default": "secret",
        "required": false
      },
      {
        "name": "permission",
        "type": "string",
        "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` \\- team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` \\- team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` \\- team members can pull, push and administer newly-added repositories.",
        "default": "pull",
        "required": false
      },
      {
        "name": "parent_team_id",
        "type": "integer",
        "description": "The ID of a team to set as the parent team. **Note**: You must pass the `hellcat-preview` media type to use this parameter.",
        "required": false
      }
    ],
    "description": "To create a team, the authenticated user must be a member of `:org`.",
    "documentationUrl": "https://developer.github.com/v3/teams/#create-team"
  },
  {
    "name": "Edit team",
    "enabledForApps": true,
    "method": "PATCH",
    "path": "/teams/:id",
    "params": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the team.",
        "required": true
      },
      {
        "name": "description",
        "type": "string",
        "description": "The description of the team.",
        "required": false
      },
      {
        "name": "privacy",
        "type": "string",
        "description": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n\\* `secret` \\- only visible to organization owners and members of this team.  \n\\* `closed` \\- visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` \\- visible to all members of this organization.",
        "required": false
      },
      {
        "name": "permission",
        "type": "string",
        "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` \\- team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` \\- team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` \\- team members can pull, push and administer newly-added repositories.",
        "default": "pull",
        "required": false
      },
      {
        "name": "parent_team_id",
        "type": "integer",
        "description": "The ID of a team to set as the parent team. **Note**: You must pass the `hellcat-preview` media type to use this parameter.",
        "required": false
      }
    ],
    "description": "To edit a team, the authenticated user must either be an owner of the org that the team is associated with, or a maintainer of the team.\n\n**Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.",
    "documentationUrl": "https://developer.github.com/v3/teams/#edit-team"
  },
  {
    "name": "Delete team",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/teams/:id",
    "params": [],
    "description": "To delete a team, the authenticated user must be a team maintainer or an owner of the org associated with the team.\n\nIf you are an organization owner and you pass the `hellcat-preview` media type, deleting a parent team will delete all of its child teams as well.",
    "documentationUrl": "https://developer.github.com/v3/teams/#delete-team"
  },
  {
    "name": "List child teams",
    "enabledForApps": true,
    "method": "GET",
    "path": "/teams/:id/teams",
    "params": [],
    "description": "At this time, the `hellcat-preview` media type is required to use this endpoint.\n\n",
    "documentationUrl": "https://developer.github.com/v3/teams/#list-child-teams"
  },
  {
    "name": "List team repos",
    "enabledForApps": true,
    "method": "GET",
    "path": "/teams/:id/repos",
    "params": [],
    "description": "**Note**: If you pass the `hellcat-preview` media type, the response will include any repositories inherited through a parent team.",
    "documentationUrl": "https://developer.github.com/v3/teams/#list-team-repos"
  },
  {
    "name": "Check if a team manages a repository",
    "enabledForApps": false,
    "method": "GET",
    "path": "/teams/:id/repos/:owner/:repo",
    "params": [],
    "description": "**Note**: If you pass the `hellcat-preview` media type, repositories inherited through a parent team will be checked as well.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](/v3/media/) via the `Accept` header:",
    "documentationUrl": "https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository"
  },
  {
    "name": "Add or update team repository",
    "enabledForApps": false,
    "method": "PUT",
    "path": "/teams/:id/repos/:org/:repo",
    "params": [
      {
        "name": "permission",
        "type": "string",
        "description": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` \\- team members can pull, but not push to or administer this repository.  \n\\* `push` \\- team members can pull and push, but not administer this repository.  \n\\* `admin` \\- team members can pull, push and administer this repository.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.  \n**Note**: If you pass the `hellcat-preview` media type, you can promote—but not demote—a `permission` attribute inherited through a parent team.",
        "required": false
      }
    ],
    "description": "To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. Also, the repository must be owned by the organization, or a direct fork of a repository owned by the organization.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](/v3/#http-verbs).\"\n\n",
    "documentationUrl": "https://developer.github.com/v3/teams/#add-or-update-team-repository"
  },
  {
    "name": "Remove team repository",
    "enabledForApps": false,
    "method": "DELETE",
    "path": "/teams/:id/repos/:owner/:repo",
    "params": [],
    "description": "If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.",
    "documentationUrl": "https://developer.github.com/v3/teams/#remove-team-repository"
  },
  {
    "name": "List user teams",
    "enabledForApps": false,
    "method": "GET",
    "path": "/user/teams",
    "params": [],
    "description": "List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) when authenticating via [OAuth](/apps/building-integrations/setting-up-and-registering-oauth-apps/).",
    "documentationUrl": "https://developer.github.com/v3/teams/#list-user-teams"
  }
]